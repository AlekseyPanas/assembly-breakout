################ CSC258H1F Fall 2022 Assembly Final Project ##################
# This file contains your implementation of Breakout.
#
# Student 1: Aleksey Panas, 1007766268
######################## Bitmap Display Configuration ########################
# - Unit width in pixels:       2
# - Unit height in pixels:      2
# - Display width in pixels:    256
# - Display height in pixels:   256
# - Base Address for Display:   0x10000000
##############################################################################

# struct Vec
#    int x
#    int y
#
# struct Bitmap
#    int width
#    int height
#    int pixels[width * height]
#
# struct Rect
#    int color
#    Vec pos
#    Vec w_h
#
# struct Brick
#    int life
#    Rect rect
#
# struct Level
#    byte is_null
#    byte num_bricks
#    byte num_walls
#    byte padding
#    Brick bricks[80]
#    Rect walls[10]
#
# struct MenuState
#    byte state
#    byte level_idx
#    byte max_unlocked
#    byte padding
#    int highscore
#
# struct Game
#    Level level
#    Vec ball_pos
#    Vec ball_vel
#    Vec paddle_pos
#    byte mode_mask
#    byte level_idx
#    byte is_paused
#    byte padding
#    int score
#    int lives
#    
#
# struct Editor
#    byte level_idx
#    byte rgb_sel
#    byte error_timer
#    byte padding
#    Vec cursor_pos
#    Vec corner1
#    Vec corner2
#    int color


.data
# Immutable Data 
########################
ADDR_DSPL: .word 0x10000000 # The address of the bitmap display. Don't forget to connect it!
ADDR_KBRD: .word 0xffff0000 # The address of the keyboard. Don't forget to connect it!

SCREEN_WIDTH: .word 128 # Screen dims in pixels
SCREEN_HEIGHT: .word 128

BG_COLOR: .word 0x00000000

NEWLINE: .asciiz "\n"
SPACE: .asciiz " "

SAVE_FILE: .asciiz "/Users/alexpanas/Desktop/UTorontoWork/Y2/CSC258/project-starter-files/breakout/breakout.save"

# Bitmaps 
########################
BMP_ZERO: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_ONE: .word 0x00000004, 0x00000007, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
BMP_TWO: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_THREE: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_FOUR: .word 0x00000004, 0x00000007, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
BMP_FIVE: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_SIX: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_SEVEN: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000
BMP_EIGHT: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_NINE: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff

BMP_TITLE: 
    .word 0x00000080, 0x0000001e, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_YOU_WIN: 
    .word 0x0000005a, 0x00000023, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 
    .word 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 
    .word 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 
    .word 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 
    .word 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 
    .word 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 
    .word 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 
    .word 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 
    .word 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0x00ffff00, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_GAME_OVER: 
    .word 0x0000005a, 0x00000032, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 
    .word 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 
    .word 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 
    .word 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 
    .word 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 
    .word 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0x00ff0000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000



BMP_BUTTON_OUTLINE: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000
BMP_BUTTON_OUTLINE_ERASE: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000
BMP_BUTTON_PLAY: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_BUTTON_LEVELS: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_BUTTON_QUIT: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_BUTTON_EDIT: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_HIGHSCORE: .word 0x00000041, 0x00000008, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_SCORE: .word 0x0000001e, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_LVL: .word 0x00000014, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_PAUSED: .word 0x0000000a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_HEART_EMPTY: .word 0x0000000a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_HEART: .word 0x0000000a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_LEVEL_SEL_UNLOCKED: .word 0x00000010, 0x00000010, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_LEVEL_SEL_LOCKED: .word 0x00000010, 0x00000010, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0x00bebebe, 0x00bebebe, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_LEVEL_SEL_OUTLINE: .word 0x00000010, 0x00000010, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff
BMP_REGULAR_LEVELS: .word 0x0000005a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_CUSTOM_LEVELS: .word 0x0000005a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_LEVEL_SEL_OUTLINE_ERASE: .word 0x00000010, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000

BMP_ADD_ICON_OUTLINE_ERASE: .word 0x00000010, 0x00000010, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_ADD_ICON: .word 0x00000010, 0x00000010, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_ADD_ICON_OUTLINE: .word 0x00000010, 0x00000010, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_MAX_LEVELS_ERROR: 
    .word 0x00000073, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 
    .word 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 
    .word 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 
    .word 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 
    .word 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0x00ff3232, 0x00ff3232, 0x00ff3232, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_EDITOR_CURSOR: .word 0x00000003, 0x00000003, 0xff000000, 0x0000ffff, 0xff000000, 0x0000ffff, 0x0000ffff, 0x0000ffff, 0xff000000, 0x0000ffff, 0xff000000
BMP_EDITOR_RGB_TEXT: .word 0x00000014, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000


# Mutable Data 
########################
# regular_levels: .space 19005  # struct Level[5]
regular_levels: 
    .word 0x00060300,0x00000001,0x00ff00fa,0x00000004,0x0000000a,0x00000014,0x00000014,0x00000001,0x0000beff,0x00000018,0x0000000a,0x00000014,0x00000014,0x00000001,0x00ff0000,0x0000002c,0x0000000a,0x00000014,0x00000014,0x00000001,0x000000ff,0x00000040,0x0000000a,0x00000014,0x00000014,0x00000001,0x00ffe600,0x00000054,0x0000000a,0x00000014,0x00000014,0x00000001,0x0000beff,0x00000068,0x0000000a,0x00000014,0x00000014,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x0000007c,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x00000004,0x00000000,0x00000078,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x000c0300,0x00000002,0x000000ff,0x00000004,0x0000000a,0x00000014,0x0000000a,0x00000002,0x00ff0000,0x00000018,0x0000000a,0x00000014,0x0000000a,0x00000002,0x0000beff,0x0000002c,0x0000000a,0x00000014,0x0000000a,0x00000002,0x000000ff,0x00000040,0x0000000a,0x00000014,0x0000000a,0x00000002,0x000000ff,0x00000054,0x0000000a,0x00000014,0x0000000a,0x00000002,0x00ff00fa,0x00000068,0x0000000a,0x00000014,0x0000000a,0x00000002,0x007300ff,0x00000004,0x00000014,0x00000014,0x0000000a,0x00000002,0x0000ff00,0x00000018,0x00000014,0x00000014,0x0000000a,0x00000002,0x0000beff,0x0000002c,0x00000014,0x00000014,0x0000000a,0x00000002,0x0000ff00,0x00000040,0x00000014,0x00000014,0x0000000a,0x00000002,0x00ff00fa,0x00000054,0x00000014,0x00000014,0x0000000a,0x00000002,0x00ff0000,0x00000068,0x00000014,0x00000014,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x0000007c,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x00000004,0x00000000,0x00000078,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00240300,0x00000001,0x0000beff,0x00000004,0x0000000a,0x0000000a,0x00000005,0x00000001,0x0000beff,0x0000000e,0x0000000a,0x0000000a,0x00000005,0x00000001,0x007300ff,0x00000018,0x0000000a,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000022,0x0000000a,0x0000000a,0x00000005,0x00000001,0x007300ff,0x0000002c,0x0000000a,0x0000000a,0x00000005,0x00000001,0x00ff0000,0x00000036,0x0000000a,0x0000000a,0x00000005,0x00000001,0x007300ff,0x00000040,0x0000000a,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x0000004a,0x0000000a,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x00000054,0x0000000a,0x0000000a,0x00000005,0x00000001,0x000000ff,0x0000005e,0x0000000a,0x0000000a,0x00000005,0x00000001,0x000000ff,0x00000068,0x0000000a,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000072,0x0000000a,0x0000000a,0x00000005,0x00000001,0x007300ff,0x00000004,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ff6400,0x0000000e,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ff00fa,0x00000018,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ff00fa,0x00000022,0x0000000f,0x0000000a,0x00000005,0x00000001,0x000000ff,0x0000002c,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000036,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ff00fa,0x00000040,0x0000000f,0x0000000a,0x00000005,0x00000001,0x0000beff,0x0000004a,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000054,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x0000005e,0x0000000f,0x0000000a,0x00000005,0x00000001,0x0000beff,0x00000068,0x0000000f,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000072,0x0000000f,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x00000004,0x00000014,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x0000000e,0x00000014,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x00000018,0x00000014,0x0000000a,0x00000005,0x00000001,0x00ff0000,0x00000022,0x00000014,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x0000002c,0x00000014,0x0000000a,0x00000005,0x00000001,0x007300ff,0x00000036,0x00000014,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x00000040,0x00000014,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x0000004a,0x00000014,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000054,0x00000014,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x0000005e,0x00000014,0x0000000a,0x00000005,0x00000001,0x0000ff00,0x00000068,0x00000014,0x0000000a,0x00000005,0x00000001,0x00ffe600,0x00000072,0x00000014,0x0000000a,0x00000005,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x0000007c,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x00000004,0x00000000,0x00000078,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00010300,0x0000000a,0x0000ff00,0x0000000a,0x0000000a,0x0000006c,0x0000003c,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x0000007c,0x00000000,0x00000004,0x00000076,0x008c8c8c,0x00000004,0x00000000,0x00000078,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00170600,0x00000003,0x007300ff,0x00000029,0x00000014,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000038,0x00000014,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x00000047,0x00000014,0x0000000f,0x0000000a,0x00000003,0x00ff0000,0x00000013,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000022,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000031,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff0000,0x00000040,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x0000004f,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x0000005e,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x0000000a,0x00000028,0x0000001e,0x0000000a,0x00000003,0x007300ff,0x00000058,0x00000028,0x0000001e,0x0000000a,0x00000003,0x00ff0000,0x00000013,0x00000032,0x0000000f,0x0000000a,0x00000003,0x0000ff00,0x00000022,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x00000031,0x00000032,0x0000000f,0x0000000a,0x00000003,0x0000ff00,0x00000040,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x0000004f,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff0000,0x0000005e,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000029,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x007300ff,0x00000038,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000047,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000022,0x0000004b,0x00000014,0x00000005,0x00000003,0x0000ff00,0x00000036,0x0000004b,0x00000014,0x00000005,0x00000003,0x00ff0000,0x0000004a,0x0000004b,0x00000014,0x00000005,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000,0x0000006c,0x0000000a,0x008c8c8c,0x00000028,0x00000028,0x00000030,0x0000000a,0x008c8c8c,0x0000000a,0x0000004b,0x00000018,0x00000005,0x008c8c8c,0x0000005e,0x0000004b,0x00000018,0x00000005,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000

   
custom_levels: .word 0x01000000:2655  # struct level[5]

menu_state: .word 0:2  # struct MenuState
game: .word 0:540  # struct Game
editor: .word 0:9  # struct Editor

dirty: .byte 1 # boolean // 1 if state is being intialized






































.text
.globl main

main:

    # menu_state.state, .level_idx, .max_unlocked, .highscore = 0
    la $t0, menu_state
    li $t1, 0
    sb $t1, 0($t0)
    sb $t1, 1($t0)
    sb $t1, 2($t0)
    sw $t1, 4($t0)
    
    # clear_screen()
    jal fn_clear_screen
    
    # custom_levels[0] = NULL
    la $t1, custom_levels
    li $t0, 1
    sb $t0, 3($t1)
    
    # Check if file exists. If so, load data for custom levels
    li $v0, 13
    la $a0, SAVE_FILE
    li $a1, 0
    syscall
    beq $v0, -1, ENDIF_main_1
    IF_main_1: # if (fd != -1)
       addi $a0, $v0, 0
       li $v0, 14
       la $a1, custom_levels
       li $a2, 10620
       syscall
    ENDIF_main_1:
    
game_loop:
    # t2 = menu_state.state <= 3
    lbu $t1, menu_state
    slt $t2, $t1, 4
    
    # t3 = 4 <= menu_state.state <= 5
    li $t8, 3
    sltu $t3, $t1, 6
    sltu $t4, $t8, $t1
    and $t3, $t3, $t4
    
    beq $t2, 1, IF_game_loop_1
    beq $t3, 1, ELIF_game_loop_1
    beq $t1, 6, ELIF_game_loop_2
    beq $t1, 7, ELIF_game_loop_3
    beq $t1, 8, ELIF_game_loop_4
    j ENDIF_game_loop_1
    IF_game_loop_1: # if (t2)  // MAIN MENU:
        jal fn_run_menu
    
        j ENDIF_game_loop_1
    ELIF_game_loop_1: # elif (t3)  // LEVEL SELECT:
        jal fn_run_level_sel_menu
        
        j ENDIF_game_loop_1
    ELIF_game_loop_2: # elif (menu_state.state == 6)  // EDITOR MENU:
        jal fn_run_editor_menu
    
        j ENDIF_game_loop_1
    ELIF_game_loop_3: # elif (menu_state.state == 7)  // EDITOR:
        jal fn_run_editor
    
        j ENDIF_game_loop_1
    ELIF_game_loop_4: # elif (menu_state.state == 8)  // GAME:
        jal fn_run_game
        
    ENDIF_game_loop_1:
    
    b game_loop
    
    
## FUNCTIONS HERE: ###########################################

## STATE MANAGEMENT FUNCTIONS: ###############################

fn_run_menu: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # // ################ INITAL STATE SETUP ################
    # if (dirty)   
    lbu $t3, dirty
    beq $t3, 0, ENDIF_run_menu_2
    IF_run_menu_2:
        # clear_screen()
        jal fn_clear_screen
        # draw_menu()
        jal fn_draw_menu
        # menu_update_outline()
        jal fn_menu_update_outline
        
        # menu_state.state = 0
        la $t0, menu_state
        li $t1, 0
        sb $t1, 0($t0)
        
        # dirty = 0
        li $t3, 0
        sb $t3, dirty
    ENDIF_run_menu_2:
    # // ################ END INITAL STATE SETUP ################
    
    # if (keyboard.is_pressed)
    lw $t1, ADDR_KBRD
    lw $t2, 0($t1)
    bne $t2, 1, ENDIF_run_menu_3
    IF_run_menu_3:
        # print(keyboard.key)
        li $v0, 1
        lw $a0, 4($t1) # w = 119, s = 115
        syscall
        li $v0, 4
        la $a0, NEWLINE
        syscall
        
        # t2 = (menu_state.state != 0 && keyboard.key == 'w')
        lw $t0, 4($t1)
        lbu $t1, menu_state
        sne $t2, $t1, 0
        seq $t3, $t0, 119
        and $t2, $t2, $t3
        # t3 = (menu_state.state != 3 && keyboard.key == 's')
        sne $t3, $t1, 3
        seq $t4, $t0, 115
        and $t3, $t3, $t4
        
        beq $t2, 1, IF_run_menu_4
        beq $t3, 1, ELIF_run_menu_1
        beq $t0, 32,ELIF_run_menu_2
        j ENDIF_run_menu_4
        IF_run_menu_4: # if (t2)
            # menu_state.state--
            lbu $t1, menu_state
            subi $t1, $t1, 1
            sb $t1, menu_state
            
            # menu_update_outline()
            jal fn_menu_update_outline
            
            j ENDIF_run_menu_4
        ELIF_run_menu_1: # elif (t3)
            # menu_state.state++
            lbu $t1, menu_state
            addi $t1, $t1, 1
            sb $t1, menu_state
            
            # menu_update_outline()
            jal fn_menu_update_outline
            
            j ENDIF_run_menu_4
        ELIF_run_menu_2: # elif (keyboard.key == ' ')
            # // **** STATE CHANGE *****
            
            lbu $t0, menu_state
            beq $t0, 0, IF_run_menu_5
            beq $t0, 1, ELIF_run_menu_3
            beq $t0, 2, ELIF_run_menu_4
            beq $t0, 3, ELIF_run_menu_5
            j ENDIF_run_menu_5
            IF_run_menu_5: # if (menu_state.state == 0)
                # // ************** Switch to GAME state
                
                # menu_state.state = 8
                li $t8, 8
                sb $t8, menu_state
                
                # game -> mode_mask = PLAY_MODE // 00
                # ->level_idx = 0, ->score = 0, ->lives = 3
                la $t2, game
                li $t8, 0
                sb $t8, 2148($t2)
                li $t9, 0              # TODO: Change level index back to 0
                sb $t9, 2149($t2)
                sw $t8, 2152($t2)
                li $t1, 3
                sw $t1, 2156($t2)
            
                j ENDIF_run_menu_5
            ELIF_run_menu_3: # elif (menu_state.state == 1)
                # // ******************* Switch to level select
                li $t8, 4
                sb $t8, menu_state
            
                j ENDIF_run_menu_5
            ELIF_run_menu_4: # elif (menu_state.state == 2)
                # // ******************* Switch to edit level select
                li $t8, 6
                sb $t8, menu_state
            
                j ENDIF_run_menu_5
            ELIF_run_menu_5: # elif (menu_state.state == 3)
                # exit() // QUIT
                j END_PROG
            ENDIF_run_menu_5:
            
            # dirty = 1 // Flags an initial state switch
            li $t0, 1
            sb $t0, dirty
            
        ENDIF_run_menu_4:
            
    ENDIF_run_menu_3:

    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra





fn_run_level_sel_menu: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4

    # // ################ INITAL STATE SETUP ################
    lbu $t0, dirty
    bne $t0, 1, ENDIF_run_level_sel_menu_1
    IF_run_level_sel_menu_1:
        
        # dirty = 0
        li $t1, 0
        sb $t1, dirty
        
        # // Clear screen
        jal fn_clear_screen
        
        # menu_state.state = 4
        li $t1, 4
        sb $t1, menu_state
        
        # menu_state.level_idx = 0
        li $t1, 0
        la $t0, menu_state
        sb $t1, 1($t0)
     
        # // Draw level sel menu
        jal fn_draw_level_select
        jal fn_level_select_update_outline
        
    ENDIF_run_level_sel_menu_1:
    # // ################ END INITAL STATE SETUP ################


    # if (keyboard.is_pressed)
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)
    bne $t1, 1, ENDIF_run_level_sel_menu_2
    IF_run_level_sel_menu_2:
    
        # // a = 97, d = 100, w = 119, s = 115, r = 114, space = 32
        lw $t1, 4($t0) # t1 key
        la $t0, menu_state
        lbu $t2, 1($t0) # t2 level_idx
        lbu $t3, 0($t0) # t3 state
        
        beq $t1, 114, ELIF_run_level_sel_menu_4
        beq $t1, 32, ELIF_run_level_sel_menu_5
        
        seq $t6, $t1, 97
        sgt $t7, $t2, 0
        and $t6, $t6, $t7
        beq $t6, 1, IF_run_level_sel_menu_3
        
        la $t0, regular_levels
        li $t4, 2124
        addi $t8, $t2, 1
        mult $t4, $t8
        mflo $t5
        add $t0, $t0, $t5
        lbu $t4, 3($t0) # t4 = regular_levels[menu_state.level_idx + 1].is_null
        la $t0, custom_levels
        add $t0, $t0, $t5
        lbu $t5, 3($t0) # t5 = custom_levels[menu_state.level_idx + 1].is_null
        seq $t7, $t3, 4 # state == 4
        and $t7, $t7, $t4
        seq $t8, $t3, 5 # state == 5
        and $t8, $t8, $t5
        or $t7, $t7, $t8
        beq $t7, 1, SKIPMARKER_run_level_sel_menu_3
        
        seq $t6, $t1, 100
        slt $t7, $t2, 4
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_level_sel_menu_1
        
        SKIPMARKER_run_level_sel_menu_3:
        
        la $t0 regular_levels
        li $t4, 2124
        mult $t4, $t2
        mflo $t4
        add $t0, $t0, $t4
        lbu $t4, 3($t0) # t4 = regular_levels[menu_state.level_idx].is_null
        beq $t4, 1, SKIPMARKER_run_level_sel_menu_1
        
        seq $t6, $t1, 119
        seq $t7, $t3, 5
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_level_sel_menu_2
        
        SKIPMARKER_run_level_sel_menu_1:
        
        la $t0 custom_levels
        li $t5, 2124
        mult $t5, $t2
        mflo $t5
        add $t0, $t0, $t5
        lbu $t5, 3($t0) # t5 = custom_levels[menu_state.level_idx].is_null
        beq $t5, 1, SKIPMARKER_run_level_sel_menu_2
        
        seq $t6, $t1, 115
        seq $t7, $t3, 4
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_level_sel_menu_3
        
        SKIPMARKER_run_level_sel_menu_2:
        
        j ENDIF_run_level_sel_menu_3
        IF_run_level_sel_menu_3: # if (keyboard.key == 'a' && menu_state.level_idx > 0)
            # menu_state.level_idx--
            la $t0, menu_state
            lbu $t1, 1($t0)
            subi $t1, $t1, 1
            sb $t1, 1($t0)
            
            # level_sel_update_outline()
            jal fn_level_select_update_outline
    
            j ENDIF_run_level_sel_menu_3
            
        ELIF_run_level_sel_menu_4: # elif (keyboard.key == 'r')
            # // ****************** STATE CHANGE ***********/  -> Main Menu
            
            # dirty = 1
            li $t1, 1
            sb $t1, dirty
            
            # menu_state.state = 0
            li $t1, 0
            sb $t1, menu_state
            
            j ENDIF_run_level_sel_menu_3
            
        ELIF_run_level_sel_menu_5: # elif (keyboard.key == ' ')
        
            # if (level not locked && menu_state.state == 4)
            la $t0, menu_state
            lbu $t1, 1($t0) # // level_idx
            lbu $t2, 2($t0) # // max_unlocked inclusive
            sle $t3, $t1, $t2 # t3 = t1 <= t2
            lbu $t4, 0($t0)
            seq $t4, $t4, 4
            and $t3, $t3, $t4
            bne $t3, 1, ENDIF_run_level_sel_menu_4
            IF_run_level_sel_menu_4:
        
                # // ****************** STATE CHANGE ***********/  -> Game, regular level
                
                # dirty = 1
                li $t1, 1
                sb $t1, dirty
                
                # menu_state.state = 8
                li $t1, 8
                sb $t1, menu_state
                
                la $t0, game
                li $t1, 1
                sb $t1, 2148($t0) # // mode_mask = 1
                la $t3, menu_state
                lbu $t1, 1($t3)
                sb $t1, 2149($t0) # // level_idx = menu_state.level_idx
                li $t1, 0
                sw $t1, 2152($t0) # // score = 0
                li $t1, 3
                sw $t1, 2156($t0) # // lives = 3
            
            ENDIF_run_level_sel_menu_4:
                
            # if (menu_state.state == 5)
            lbu $t1, menu_state
            bne $t1, 5, ENDIF_run_level_sel_menu_5
            IF_run_level_sel_menu_5:
                # // ****************** STATE CHANGE ***********/  -> Game, custom level
            
                # dirty = 1
                li $t1, 1
                sb $t1, dirty
                
                # menu_state.state = 8
                li $t1, 8
                sb $t1, menu_state
                
                la $t0, game
                li $t1, 2
                sb $t1, 2148($t0) # // mode_mask = 2
                la $t3, menu_state
                lbu $t1, 1($t3)
                sb $t1, 2149($t0) # // level_idx = menu_state.level_idx
                li $t1, 0
                sw $t1, 2152($t0) # // score = 0
                li $t1, 3
                sw $t1, 2156($t0) # // lives = 3
            
            ENDIF_run_level_sel_menu_5:
                
            j ENDIF_run_level_sel_menu_3
            
        # elif (keyboard.key == 'd' && menu_state.level_idx < 4 
        # && !( 
        #       (state == 4 && regular_levels[menu_state.level_idx + 1] == NULL) || 
        #       (state == 5 && custom_levels[menu_state.level_idx + 1] == NULL) ))
        ELIF_run_level_sel_menu_1: 
            # menu_state.level_idx++
            la $t0, menu_state
            lbu $t1, 1($t0)
            addi $t1, $t1, 1
            sb $t1, 1($t0)
            
            # level_sel_update_outline()
            jal fn_level_select_update_outline
            
            j ENDIF_run_level_sel_menu_3
        ELIF_run_level_sel_menu_2: # elif (keyboard.key == 'w' && menu_state.state == 5 && regular_levels[menu_state.level_idx] != NULL)
            # menu_state.state = 4
            la $t0, menu_state
            li $t1, 4
            sb $t1, 0($t0)
            
            # level_sel_update_outline()
            jal fn_level_select_update_outline
            
            j ENDIF_run_level_sel_menu_3
        ELIF_run_level_sel_menu_3: # elif (keyboard.key == 's' && menu_state.state == 4 && custom_levels[menu_state.level_idx] != NULL)
            # menu_state.state = 5
            la $t0, menu_state
            li $t1, 5
            sb $t1, 0($t0)
            
            # level_sel_update_outline()
            jal fn_level_select_update_outline
        
        ENDIF_run_level_sel_menu_3:
        
    ENDIF_run_level_sel_menu_2:

    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra





fn_run_editor_menu: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # ##################### INITIALIZATION ##############
    # if (dirty)
    lbu $t1, dirty
    bne $t1, 1, ENDIF_run_editor_menu_1
    IF_run_editor_menu_1:
    
        # dirty = 0
        li $t1, 0
        sb $t1, dirty
        
        # // clear screen
        jal fn_clear_screen
    
        # menu_state.level_idx = 0
        li $t1, 0
        la $t0, menu_state
        sb $t1, 1($t0)
        
        # Draw
        jal fn_draw_edit_menu
        jal fn_edit_menu_update_outlines
    
    ENDIF_run_editor_menu_1:
    
    # ##################### END INITIALIZATION ##############

    # if (keyboard.is_pressed)
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)
    bne $t1, 1, ENDIF_run_editor_menu_2
    IF_run_editor_menu_2:
        # // a = 97, d = 100, w = 119, s = 115, r = 114, space = 32
    
        # t1 first_null = first_null_custom()
        jal fn_first_null_custom
        addi $sp, $sp, 4
        lw $t1, 0($sp)
    
        # t2 = keyboard.key
        lw $t0, ADDR_KBRD
        lw $t2, 4($t0)
        beq $t2, 32, ELIF_run_editor_menu_2
        beq $t2, 114, ELIF_run_editor_menu_3
        la $t3, menu_state
        lbu $t4, 1($t3)
        slt $t4, $t4, $t1
        seq $t5, $t2, 100
        and $t4, $t4, $t5
        beq $t4, 1, IF_run_editor_menu_3
        lbu $t4, 1($t3)
        sgt $t4, $t4, 0
        seq $t5, $t2, 97
        and $t4, $t4, $t5
        beq $t4, 1, ELIF_run_editor_menu_1
        j ENDIF_run_editor_menu_3
        IF_run_editor_menu_3: # if (keyboard.key == 'd' && menu_state.level_idx < first_null)
            # menu_state.level_idx ++ 
            la $t0, menu_state
            lbu $t1, 1($t0)
            addi $t1, $t1, 1
            sb $t1, 1($t0)
        
            # // Update outlines
            jal fn_edit_menu_update_outlines
        
            j ENDIF_run_editor_menu_3
        ELIF_run_editor_menu_1: # elif (keyboard.key == 'a' && menu_state.level_idx > 0)
            # menu_state.level_idx --
            la $t0, menu_state
            lbu $t1, 1($t0)
            subi $t1, $t1, 1
            sb $t1, 1($t0)
        
            # // Update outlines
            jal fn_edit_menu_update_outlines
            
            j ENDIF_run_editor_menu_3
        ELIF_run_editor_menu_3: # elif (keyboard.key == 'r')
            # /************ STATE CHANGE *************/ -> Main Menu
            li $t1, 1
            sb $t1, dirty
            li $t1, 0
            sb $t1, menu_state
        
            j ENDIF_run_editor_menu_3
        ELIF_run_editor_menu_2: # elif (keyboard.key == ' ')
            
            # if (menu_state.level_idx == first_null)  // + icon was pressed
            la $t0, menu_state
            lbu $t2, 1($t0)
            bne $t1, $t2, ELSE_run_editor_menu_1
            IF_run_editor_menu_4: 
                
                # if (menu_state.level_idx == 5)
                la $t0, menu_state
                lbu $t2, 1($t0)
                bne $t2, 5, ELSE_run_editor_menu_2
                IF_run_editor_menu_5: 
                    # // Draw error message, max levels!
                    li $t1, 10
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 100
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    la $t1, BMP_MAX_LEVELS_ERROR
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_draw_bitmap
                    
                    j ENDIF_run_editor_menu_5
                    
                ELSE_run_editor_menu_2: # else:
                    # // write an empty level to the custom level index and set it to not null
                    # // change state back to edit menu to reset everything
                    
                    la $t0, menu_state
                    lbu $t2, 1($t0) # level_idx
                    li $t3, 2124
                    mult $t2, $t3
                    mflo $t2
                    la $t0, custom_levels
                    add $t0, $t0, $t2 # t0 = &custom_levels[level_idx]
                    
                    li $t1, 0 # .is_null = 0
                    sb $t1, 3($t0)
                    sb $t1, 2($t0) # .num_bricks = 0
                    sb $t1, 1($t0) # .num_walls = 0
                    
                    # for count in [0, 79]
                    li $t6, 0 # count = 0
                    LOOP_run_editor_menu_1: 
                        beq $t6, 80, ENDLOOP_run_editor_menu_1
                    
                        # t7 = sizeof(Brick) * count
                        li $t7, 24
                        mult $t6, $t7
                        mflo $t7
                        
                        # t8 = &t0->bricks[count]
                        addi $t8, $t0, 4
                        add $t8, $t8, $t7
                        li $t1, 0
                        sw $t1, 0($t8) # t8->life = 0 // Brick = NULL
                        
                        # count++
                        addi $t6, $t6, 1
                    
                        j LOOP_run_editor_menu_1
                    ENDLOOP_run_editor_menu_1:
                    
                    
                    # for count in [0, 9]
                    li $t6, 0 # count = 0
                    LOOP_run_editor_menu_2: 
                        beq $t6, 10, ENDLOOP_run_editor_menu_2
                    
                        # t7 = sizeof(Brick) * count
                        li $t7, 20
                        mult $t6, $t7
                        mflo $t7
                        
                        # t8 = &t0->walls[count]
                        addi $t8, $t0, 1924
                        add $t8, $t8, $t7
                        li $t1, 0xff000000
                        sw $t1, 0($t8) # t8->color = 0xff... // Wall = NULL
                        
                        # count++
                        addi $t6, $t6, 1
                    
                        j LOOP_run_editor_menu_2
                    ENDLOOP_run_editor_menu_2:
                    
                    # /*********** State Change ******** Back to -> Editor Menu
                    li $t1, 1
                    sb $t1, dirty
                    li $t1, 6
                    sb $t1, menu_state
                    
                ENDIF_run_editor_menu_5: 
                    
                j ENDIF_run_editor_menu_4
            ELSE_run_editor_menu_1: # else:  // Level was pressed
                # /************* STATE CHANGE *************/ -> Editor
            
                # dirty = 1
                li $t1, 1
                sb $t1, dirty
                
                # menu_state.state = 7
                li $t1, 7
                sb $t1, menu_state
                
                # editor.level_idx = menu.level_idx
                la $t0, menu_state
                lbu $t1, 1($t0) # level_idx
                sb $t1, editor
                
            ENDIF_run_editor_menu_4:
        
        ENDIF_run_editor_menu_3:
        
    ENDIF_run_editor_menu_2:

    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra
    
    
    
fn_run_editor: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4

    # ######################### INITIALIZATION #####################
    lbu $t1, dirty
    bne $t1, 1, ENDIF_run_editor_1
    IF_run_editor_1: # if dirty
        
        # dirty = 0
        li $t1, 0
        sb $t1, dirty
    
        # // Clear Screen
        jal fn_clear_screen
    
        la $t0, editor
        li $t1, 1
        sb $t1, 1($t0) # .RGB_sel = 1
        sb $t1, 3($t0) # .lives = 1
        li $t1, 0
        sb $t1, 2($t0) # .error_timer = 0
        li $t1, 50
        sw $t1, 4($t0) # .cursor_pos.x = 50
        sw $t1, 8($t0) # .cursor_pos.y = 50
        li $t1, 10
        sw $t1, 12($t0) # .corner1.x = 10
        sw $t1, 16($t0) # .corner1.y = 10
        li $t1, 15
        sw $t1, 20($t0) # .corner2.x = 15
        sw $t1, 24($t0) # .corner2.y = 15
        li $t1, 0x00ff0000
        sw $t1, 28($t0) # .color = Red
        li $t1, 0
        sw $t1, 32($t0) # .fast_cursor = 0
        
        # // Draw editor
        jal fn_draw_editor_topbar
        jal fn_draw_editor_main
    
    ENDIF_run_editor_1:

    # ######################### END INITIALIZATION #####################

    # if (keyboard.is_pressed)
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)
    bne $t1, 1, ENDIF_run_editor_3
    IF_run_editor_3:
        # 1 = 49, 2 = 50, b = 98, x = 120, a = 97, s = 115, d = 100, w = 119, [ = 91, ] = 93, q = 113, e = 101, r = 114, v = 118, f = 102
        
        lw $t1, 4($t0) # key
        beq $t1, 102, ELIF_run_editor_21
        beq $t1, 49, ELIF_run_editor_4
        beq $t1, 50, ELIF_run_editor_5
        beq $t1, 113, ELIF_run_editor_8
        beq $t1, 101, ELIF_run_editor_9
        beq $t1, 114, ELIF_run_editor_10
        beq $t1, 120, ELIF_run_editor_11
        beq $t1, 98, ELIF_run_editor_12
        beq $t1, 118, ELIF_run_editor_13
        la $t0, editor
        lw $t2, 4($t0) # cursor.x
        lw $t3, 8($t0) # cursor.y
        lbu $t4, 1($t0) # rgb_sel
        
        slt $t6, $t2, 127
        seq $t7, $t1, 100
        and $t6, $t6, $t7
        beq $t6, 1, IF_run_editor_2
        
        sgt $t6, $t2, 0
        seq $t7, $t1, 97
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_editor_1
        
        sgt $t6, $t3, 0
        seq $t7, $t1, 119
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_editor_2
        
        slt $t6, $t3, 117
        seq $t7, $t1, 115
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_editor_3
        
        sgt $t6, $t4, 1
        seq $t7, $t1, 91
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_editor_6
        
        slt $t6, $t4, 4
        seq $t7, $t1, 93
        and $t6, $t6, $t7
        beq $t6, 1, ELIF_run_editor_7
        
        j ENDIF_run_editor_2
        IF_run_editor_2: # key == 'd' && cursor.x < 127            
            la $t0, editor
            lw $t1, 32($t0)
            beq $t1, 0, IF_run_editor_17
            lw $t1, 4($t0)
            blt $t1, 117, ELIF_run_editor_25
            j ENDIF_run_editor_17
            IF_run_editor_17: # if (!fast_cursor)
                # cursor.x ++
                la $t0, editor
                lw $t1, 4($t0)
                addi $t1, $t1, 1
                sw $t1, 4($t0)
                
                j ENDIF_run_editor_16
            ELIF_run_editor_25: # elif (cursor.x < 117)
                # cursor.x += 10
                la $t0, editor
                lw $t1, 4($t0)
                addi $t1, $t1, 10
                sw $t1, 4($t0)
                
            ENDIF_run_editor_17:
        
            j ENDIF_run_editor_2
        ELIF_run_editor_1: # key == 'a' && cursor.x > 0
            # cursor.x --            
            la $t0, editor
            lw $t1, 32($t0)
            beq $t1, 0, IF_run_editor_16
            lw $t1, 4($t0)
            bgt $t1, 9, ELIF_run_editor_24
            j ENDIF_run_editor_16
            IF_run_editor_16: # if (!fast_cursor)
                # cursor.x --
                la $t0, editor
                lw $t1, 4($t0)
                subi $t1, $t1, 1
                sw $t1, 4($t0)
                
                j ENDIF_run_editor_16
            ELIF_run_editor_24: # elif (cursor.x > 9)
                # cursor.x -= 10
                la $t0, editor
                lw $t1, 4($t0)
                subi $t1, $t1, 10
                sw $t1, 4($t0)
                
            ENDIF_run_editor_16:
        
            j ENDIF_run_editor_2
        ELIF_run_editor_2: # key == 'w' && cursor.y > 0            
            la $t0, editor
            lw $t1, 32($t0)
            beq $t1, 0, IF_run_editor_15
            lw $t1, 8($t0)
            bgt $t1, 9, ELIF_run_editor_23
            j ENDIF_run_editor_15
            IF_run_editor_15: # if (!fast_cursor)
                # cursor.y --
                la $t0, editor
                lw $t1, 8($t0)
                subi $t1, $t1, 1
                sw $t1, 8($t0)
                
                j ENDIF_run_editor_15
            ELIF_run_editor_23: # elif (cursor.y > 9)
                # cursor.y -= 10
                la $t0, editor
                lw $t1, 8($t0)
                subi $t1, $t1, 10
                sw $t1, 8($t0)
                
            ENDIF_run_editor_15:
        
            j ENDIF_run_editor_2
        ELIF_run_editor_3: # key == 's' && cursor.y < 117
            
            la $t0, editor
            lw $t1, 32($t0)
            beq $t1, 0, IF_run_editor_14
            lw $t1, 8($t0)
            blt $t1, 107, ELIF_run_editor_22
            j ENDIF_run_editor_14
            IF_run_editor_14: # if (!fast_cursor)
                # cursor.y ++
                la $t0, editor
                lw $t1, 8($t0)
                addi $t1, $t1, 1
                sw $t1, 8($t0)
                
                j ENDIF_run_editor_14
            ELIF_run_editor_22: # elif (cursor.y < 107)
                # cursor.y += 10
                la $t0, editor
                lw $t1, 8($t0)
                addi $t1, $t1, 10
                sw $t1, 8($t0)
                
            ENDIF_run_editor_14:
            
            
        
            j ENDIF_run_editor_2
        ELIF_run_editor_21: # key == 'f'
            # // toggle fast_cursor
            la $t0, editor
            lw $t1, 32($t0)
            beq $t1, 1, ELSE_run_editor_1
            IF_run_editor_13: # if (.fast_cursor == 0)
                li $t1, 1
                sw $t1, 32($t0)
                j ENDIF_run_editor_13
            ELSE_run_editor_1: # if (.fast_cursor == 1)
                li $t1, 0
                sw $t1, 32($t0)
            ENDIF_run_editor_13:
        
            j ENDIF_run_editor_2
        ELIF_run_editor_4: # key == '1'
            # corner1 = cursor
            la $t0, editor
            lw $t1, 4($t0)
            lw $t2, 8($t0)
            sw $t1, 12($t0)
            sw $t2, 16($t0)
        
            j ENDIF_run_editor_2
        ELIF_run_editor_5: # key == '2'
            # corner2 = cursor
            la $t0, editor
            lw $t1, 4($t0)
            lw $t2, 8($t0)
            sw $t1, 20($t0)
            sw $t2, 24($t0)
        
            j ENDIF_run_editor_2
        ELIF_run_editor_6: # key == '[' && rgb_sel > 1
            # rgb_sel --
            la $t0, editor
            lbu $t1, 1($t0)
            subi $t1, $t1, 1
            sb $t1, 1($t0)
        
            j ENDIF_run_editor_2
        ELIF_run_editor_7: # key == ']' && rgb_sel < 4
            # rgb_sel ++
            la $t0, editor
            lbu $t1, 1($t0)
            addi $t1, $t1, 1
            sb $t1, 1($t0)
        
            j ENDIF_run_editor_2
        ELIF_run_editor_8: # key == 'q'
            
            la $t0, editor
            lbu $t1, 1($t0) # rgb_sel
            lbu $t2, 30($t0) # color.red
            lbu $t3, 29($t0) # color.green
            lbu $t4, 28($t0) # color.blue
            lbu $t5, 3($t0) # lives
            
            seq $t7, $t1, 1
            sgt $t8, $t2, 0
            and $t7, $t7, $t8
            beq $t7, 1, IF_run_editor_4
            
            seq $t7, $t1, 2
            sgt $t8, $t3, 0
            and $t7, $t7, $t8
            beq $t7, 1, ELIF_run_editor_14
            
            seq $t7, $t1, 3
            sgt $t8, $t4, 0
            and $t7, $t7, $t8
            beq $t7, 1, ELIF_run_editor_15
            
            seq $t7, $t1, 4
            sgt $t8, $t5, 1
            and $t7, $t7, $t8
            beq $t7, 1, ELIF_run_editor_16
            
            j ENDIF_run_editor_4
            IF_run_editor_4: # if (rgb_sel == 1 && color.red > 0)
                # color.red -= 5
                subi $t2, $t2, 5
                sb $t2, 30($t0)
                
                j ENDIF_run_editor_4
            ELIF_run_editor_14: # if (rgb_sel == 2 && color.green > 0)
                # color.green -= 5
                subi $t3, $t3, 5
                sb $t3, 29($t0)
            
                j ENDIF_run_editor_4
            ELIF_run_editor_15: # if (rgb_sel == 3 && color.blue > 0)
                # color.blue -= 5
                subi $t4, $t4, 5
                sb $t4, 28($t0)
            
                j ENDIF_run_editor_4
            ELIF_run_editor_16: # if (rgb_sel == 4 && lives > 1)
                # lives --
                subi $t5, $t5, 1
                sb $t5, 3($t0)
            
            ENDIF_run_editor_4:
        
        
            j ENDIF_run_editor_2
        ELIF_run_editor_9: # key == 'e'
        
            la $t0, editor
            lbu $t1, 1($t0) # rgb_sel
            lbu $t2, 30($t0) # color.red
            lbu $t3, 29($t0) # color.green
            lbu $t4, 28($t0) # color.blue
            lbu $t5, 3($t0) # lives
            
            seq $t7, $t1, 1
            slt $t8, $t2, 255
            and $t7, $t7, $t8
            beq $t7, 1, IF_run_editor_5
            
            seq $t7, $t1, 2
            slt $t8, $t3, 255
            and $t7, $t7, $t8
            beq $t7, 1, ELIF_run_editor_17
            
            seq $t7, $t1, 3
            slt $t8, $t4, 255
            and $t7, $t7, $t8
            beq $t7, 1, ELIF_run_editor_18
            
            seq $t7, $t1, 4
            slt $t8, $t5, 50
            and $t7, $t7, $t8
            beq $t7, 1, ELIF_run_editor_19
            
            j ENDIF_run_editor_5
            IF_run_editor_5: # if (rgb_sel == 1 && color.red < 255)
                # color.red += 5
                addi $t2, $t2, 5
                sb $t2, 30($t0)
                
                j ENDIF_run_editor_5
            ELIF_run_editor_17: # if (rgb_sel == 2 && color.green < 255)
                # color.green += 5
                addi $t3, $t3, 5
                sb $t3, 29($t0)
            
                j ENDIF_run_editor_5
            ELIF_run_editor_18: # if (rgb_sel == 3 && color.blue < 255)
                # color.blue += 5
                addi $t4, $t4, 5
                sb $t4, 28($t0)
            
                j ENDIF_run_editor_5
            ELIF_run_editor_19: # if (rgb_sel == 4 && lives < 50)
                # lives ++
                addi $t5, $t5, 1
                sb $t5, 3($t0)
            
            ENDIF_run_editor_5:
        
            j ENDIF_run_editor_2
        ELIF_run_editor_10: # key == 'r'
            # /********** STATE CHANGE *********/ -> Main Menu
            li $t1, 1
            sb $t1, dirty
            
            li $t1, 0
            sb $t1, menu_state   
        
            j ENDIF_run_editor_2
        ELIF_run_editor_11: # key == 'x'
            la $t0, custom_levels
            lbu $t1, editor
            li $t2, 2124
            mult $t1, $t2
            mflo $t2
            add $t1, $t0, $t2 # t1 = &custom_levels[level_idx]
        
            la $t0, editor
            lw $t2, 4($t0) # cursor.x
            lw $t3, 8($t0) # cursor.y
            
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            sw $t3, 0($sp)
            subi $sp, $sp, 4
            li $t1, 1
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 1
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_collide_level
            addi $sp, $sp, 4
            lw $t1, 0($sp) # t1 int_code
            addi $sp, $sp, 4
            lw $t2, 0($sp) # t2 ptr
            
            beq $t1, 1, IF_run_editor_6
            beq $t1, 2, ELIF_run_editor_20
            j ENDIF_run_editor_6
            IF_run_editor_6: # if (int_code == 1) // Brick
                # ptr->life = 0
                li $t3, 0
                sw $t3, 0($t2)
                
                # custom_levels[level_idx].num_bricks --
                la $t0, custom_levels
                lbu $t4, editor
                li $t5, 2124
                mult $t4, $t5
                mflo $t5
                add $t5, $t0, $t5 # t5 = &custom_levels[level_idx]
                lbu $t6, 2($t5)
                subi $t6, $t6, 1
                sb $t6, 2($t5)
                
                j ENDIF_run_editor_6
            ELIF_run_editor_20: # elif (int_code == 2) // Wall
                # ptr->color = 0xff000000
                li $t3, 0xff000000
                sw $t3, 0($t2)
                
                # custom_levels[level_idx].num_walls --
                la $t0, custom_levels
                lbu $t4, editor
                li $t5, 2124
                mult $t4, $t5
                mflo $t5
                add $t5, $t0, $t5 # t5 = &custom_levels[level_idx]
                lbu $t6, 1($t5)
                subi $t6, $t6, 1
                sb $t6, 1($t5)
                
            ENDIF_run_editor_6:
        
            j ENDIF_run_editor_2
        ELIF_run_editor_12: # key == 'b'
            # 4($sp) &custom_levels[level_idx]
            # 8($sp) x 
            # 12($sp) y
            # 16($sp) w 
            # 20($sp) h
            subi $sp, $sp, 4
            subi $sp, $sp, 4
            subi $sp, $sp, 4
            subi $sp, $sp, 4
            subi $sp, $sp, 4
        
            la $t0, custom_levels
            lbu $t4, editor
            li $t5, 2124
            mult $t4, $t5
            mflo $t5
            add $t5, $t0, $t5 
            sw $t5, 4($sp) # 4($sp) = &custom_levels[level_idx]
            
            lw $t1, 4($sp)
            lbu $t1, 2($t1)
            bge $t1, 80, ENDIF_run_editor_7
            IF_run_editor_7: # if (->num_bricks < 80)
                
                # // Compute rectangle and save it to the stack
                la $t0, editor
                lw $t1, 12($t0)
                lw $t2, 16($t0)
                lw $t3, 20($t0)
                lw $t4, 24($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                sw $t2, 0($sp)
                subi $sp, $sp, 4
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                sw $t4, 0($sp)
                subi $sp, $sp, 4
                jal fn_corners_to_rect
                addi $sp, $sp, 4
                lw $t4, 0($sp) # h
                addi $sp, $sp, 4
                lw $t3, 0($sp) # w
                addi $sp, $sp, 4
                lw $t2, 0($sp) # y
                addi $sp, $sp, 4
                lw $t1, 0($sp) # x
                sw $t1, 8($sp)
                sw $t2, 12($sp)
                sw $t3, 16($sp)
                sw $t4, 20($sp)
                
                # if (! rect.collide(level))
                lw $t6, 4($sp)
                sw $t6, 0($sp)
                subi $sp, $sp, 4
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                sw $t2, 0($sp)
                subi $sp, $sp, 4
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                sw $t4, 0($sp)
                subi $sp, $sp, 4
                jal fn_collide_level
                addi $sp, $sp, 4
                lw $t7, 0($sp)
                addi $sp, $sp, 4
                bne $t7, 4, ENDIF_run_editor_8
                IF_run_editor_8:
                
                    lw $t0, 4($sp) # // level pointer
                    addi $t0, $t0, 4 # // Go to bricks
                    LOOP_run_editor_1:
                        
                        # if (brick == NULL)
                        lw $t1, 0($t0)
                        bne $t1, 0, ENDIF_run_editor_9
                        IF_run_editor_9:
                            
                            # // Generate brick
                            la $t1, editor
                            lbu $t2, 3($t1) # lives = lives
                            sw $t2, 0($t0)
                            lw $t2, 28($t1) # color = color
                            sw $t2, 4($t0)
                            lw $t2, 8($sp) # x
                            sw $t2, 8($t0)
                            lw $t2, 12($sp) # y
                            sw $t2, 12($t0)
                            lw $t2, 16($sp) # w
                            sw $t2, 16($t0)
                            lw $t2, 20($sp) # h
                            sw $t2, 20($t0)
                            
                            # ->num_bricks++
                            lw $t1, 4($sp)
                            lbu $t2, 2($t1)
                            addi $t2, $t2, 1
                            sb $t2, 2($t1)
                            
                            # break;
                            j ENDLOOP_run_editor_1
                            
                        ENDIF_run_editor_9:
                    
                        # ptr += sizeof(Brick) // 24
                        addi $t0, $t0, 24
                        j LOOP_run_editor_1
                    ENDLOOP_run_editor_1:
                    
                ENDIF_run_editor_8:
            
            ENDIF_run_editor_7:
        
            addi $sp, $sp, 20
            j ENDIF_run_editor_2
        ELIF_run_editor_13: # key == 'v'
        
            # 4($sp) &custom_levels[level_idx]
            # 8($sp) x 
            # 12($sp) y
            # 16($sp) w 
            # 20($sp) h
            subi $sp, $sp, 4
            subi $sp, $sp, 4
            subi $sp, $sp, 4
            subi $sp, $sp, 4
            subi $sp, $sp, 4
        
            la $t0, custom_levels
            lbu $t4, editor
            li $t5, 2124
            mult $t4, $t5
            mflo $t5
            add $t5, $t0, $t5 
            sw $t5, 4($sp) # 4($sp) = &custom_levels[level_idx]

            lw $t1, 4($sp)
            lbu $t1, 1($t1)
            bge $t1, 10, ENDIF_run_editor_10
            IF_run_editor_10: # if (->num_walls < 10)
                
                # // Compute rectangle and save it to the stack
                la $t0, editor
                lw $t1, 12($t0)
                lw $t2, 16($t0)
                lw $t3, 20($t0)
                lw $t4, 24($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                sw $t2, 0($sp)
                subi $sp, $sp, 4
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                sw $t4, 0($sp)
                subi $sp, $sp, 4
                jal fn_corners_to_rect
                addi $sp, $sp, 4
                lw $t4, 0($sp) # h
                addi $sp, $sp, 4
                lw $t3, 0($sp) # w
                addi $sp, $sp, 4
                lw $t2, 0($sp) # y
                addi $sp, $sp, 4
                lw $t1, 0($sp) # x
                sw $t1, 8($sp)
                sw $t2, 12($sp)
                sw $t3, 16($sp)
                sw $t4, 20($sp)
                
                # if (! rect.collide(level))
                lw $t6, 4($sp)
                sw $t6, 0($sp)
                subi $sp, $sp, 4
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                sw $t2, 0($sp)
                subi $sp, $sp, 4
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                sw $t4, 0($sp)
                subi $sp, $sp, 4
                jal fn_collide_level
                addi $sp, $sp, 4
                lw $t7, 0($sp)
                addi $sp, $sp, 4
                bne $t7, 4, ENDIF_run_editor_11
                IF_run_editor_11:
                
                    lw $t0, 4($sp) # // level pointer
                    addi $t0, $t0, 1924 # // Go to walls
                    LOOP_run_editor_2:
                        
                        # if (wall == NULL)
                        lw $t1, 0($t0)
                        srl $t1, $t1, 24
                        seq $t1, $t1, 0xff
                        bne $t1, 1, ENDIF_run_editor_12
                        IF_run_editor_12:
                            
                            # // Generate wall
                            la $t1, editor
                            lw $t2, 28($t1) # color = color
                            sw $t2, 0($t0)
                            lw $t2, 8($sp) # x
                            sw $t2, 4($t0)
                            lw $t2, 12($sp) # y
                            sw $t2, 8($t0)
                            lw $t2, 16($sp) # w
                            sw $t2, 12($t0)
                            lw $t2, 20($sp) # h
                            sw $t2, 16($t0)
                            
                            # ->num_walls++
                            lw $t1, 4($sp)
                            lbu $t2, 1($t1)
                            addi $t2, $t2, 1
                            sb $t2, 1($t1)
                            
                            # break;
                            j ENDLOOP_run_editor_2
                            
                        ENDIF_run_editor_12:
                    
                        # ptr += sizeof(Wall) // 20
                        addi $t0, $t0, 20
                        j LOOP_run_editor_2
                    ENDLOOP_run_editor_2:
                    
                ENDIF_run_editor_11:
            
            ENDIF_run_editor_10:
        
            addi $sp, $sp, 20
        
        ENDIF_run_editor_2:
        
        # // Re-Draw editor
        jal fn_draw_editor_topbar
        jal fn_draw_editor_main
        
    ENDIF_run_editor_3:


    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra
    
    
    
fn_run_game: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # // ############### INITIALIZATION
    lbu $t0, dirty
    bne $t0, 1, ENDIF_run_game_1
    IF_run_game_1: # if (dirty) 
        
        # t0 = &game
        la $t0, game
        
        # game.is_paused = 0
        li $t1, 0
        sb $t1, 2150($t0)
        
        # t1 count = 0
        li $t1, 0
        
        # if (game.mode_mask == 2) // Custom level
        lbu $t1, 2148($t0)
        bne $t1, 2, ELSE_run_game_14
        IF_run_game_46:
            # t3 = &custom + (game.level_idx) * sizeof(Level)
            la $t4, custom_levels
            lbu $t2, 2149($t0)
            li $t3, 2124  # // level size
            mult $t2, $t3
            mflo $t3
            add $t3, $t4, $t3
        
            j ENDIF_run_game_46
        ELSE_run_game_14: # else: // Regular level
        
            # t3 = &regular_levels + (game.level_idx) * sizeof(Level)
            la $t4, regular_levels
            lbu $t2, 2149($t0)
            li $t3, 2124  # // level size
            mult $t2, $t3
            mflo $t3
            add $t3, $t4, $t3
            
        ENDIF_run_game_46:
        
        
        LOOP_run_game_1: # while (count < sizeof(level))  // Copy level into game struct
            beq $t1, 2124, ENDLOOP_run_game_1
            
            # *t0 = *t3  // Copy next byte
            lbu $t5, 0($t3)
            sb $t5, 0($t0)
            
            # t0++, t3++  // Increment address to next byte
            addi $t0, $t0, 1
            addi $t3, $t3, 1
            
            # count++
            addi $t1, $t1, 1
            j LOOP_run_game_1
        ENDLOOP_run_game_1:
        
        # game->ball_pos == (60, 102), ->ball_vel = (0, 0), 
        #     ->paddle_pos = (50, 110)
        la $t0, game
        li $t1, 60
        sw $t1, 2124($t0)
        li $t1, 102
        sw $t1, 2128($t0)
        li $t1, 0         # TODO: CHANGE VELOCITY X BACK TO 0
        sw $t1, 2132($t0)   
        li $t1, 0           # TODO: REMOVE THIS LINE, VELOCITY Y CHANGE
        sw $t1, 2136($t0)
        li $t1, 50
        sw $t1, 2140($t0)
        li $t1, 110
        sw $t1, 2144($t0)
        
        # clear_screen
        jal fn_clear_screen
        
        # draw_level(&(game->level))
        la $t0, game
        sw $t0, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_level
        
        # draw_rect(white, game->paddle_pos, Vec(25, 3)) // Draw Paddle
        la $t0, game
        li $t1, 0x00ffffff
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2140($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2144($t0)
        addi $t1, $t1, 10 # // Account for topbar. Actual draw position shifts by 10
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 25
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # draw_rect(gray, game->ball_pos, Vec(3, 3)) // Draw Ball
        la $t0, game
        li $t1, 0x0eeeeee
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2124($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2128($t0)
        addi $t1, $t1, 10 # // Account for topbar. Actual draw position shifts by 10
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # draw_bitmap(Vec(1, 0), &BMP_SCORE) // Draw Score BMP
        li $t1, 16
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 0
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_SCORE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        # // Draw score integer value
        jal fn_game_update_score
        
        # // Draw paused icon
        jal fn_game_update_paused
        
        # draw_bitmap(Vec(1, 0), &BMP_LVL) // Draw lvl BMP
        li $t1, 65
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 0
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_LVL
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        # draw_int(Vec(88, 2), game->level_idx + 1)  // Draw level integer value
        li $t1, 88
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 2
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t0, game
        lbu $t1, 2149($t0)
        addi $t1, $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_int
    
    
        # if (0 < game->lives):
        la $t0, game
        lw $t1, 2156($t0)
        li $t3, 0
        sltu $t2, $t3, $t1 
        bne $t2, 1, ELSE_run_game_1
        IF_run_game_2:
            # draw_bitmap(Vec(100, 0), &BMP_HEART_EMPTY) // Draw full heart
            li $t1, 100
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
            j ENDIF_run_game_2
        ELSE_run_game_1:
            # draw_bitmap(Vec(100, 0), &BMP_HEART_EMPTY) // Draw empty heart
            li $t1, 100
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART_EMPTY
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        ENDIF_run_game_2:
        
        
        # if (1 < game->lives):
        la $t0, game
        lw $t1, 2156($t0)
        li $t3, 1
        sltu $t2, $t3, $t1 
        bne $t2, 1, ELSE_run_game_2
        IF_run_game_3:
            # draw_bitmap(Vec(108, 0), &BMP_HEART_EMPTY) // Draw full heart
            li $t1, 108
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
            j ENDIF_run_game_3
        ELSE_run_game_2:
            # draw_bitmap(Vec(108, 0), &BMP_HEART_EMPTY) // Draw empty heart
            li $t1, 108
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART_EMPTY
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        ENDIF_run_game_3:
        
        
        # if (2 < game->lives):
        la $t0, game
        lw $t1, 2156($t0)
        li $t3, 2
        sltu $t2, $t3, $t1 
        bne $t2, 1, ELSE_run_game_3
        IF_run_game_4:
            # draw_bitmap(Vec(116, 0), &BMP_HEART_EMPTY) // Draw full heart
            li $t1, 116
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
            j ENDIF_run_game_4
        ELSE_run_game_3:
            # draw_bitmap(Vec(116, 0), &BMP_HEART_EMPTY) // Draw empty heart
            li $t1, 116
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART_EMPTY
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        ENDIF_run_game_4:
        
        
        # dirty = 0
        li $t0, 0
        sb $t0, dirty
        
    ENDIF_run_game_1: 
    # // ############ END INITIALIZATION


    # // Preload keyboard info
    # 4($sp) is_pressed
    # 8($sp) key
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)
    lw $t2, 4($t0)
    sw $t1, 4($sp)
    sw $t2, 8($sp)



    # // ############ MAIN GAME FUNCTIONALITY
    # if (!game->is_paused && game.level.brick_count > 0 && game.lives > 0)
    la $t0, game
    lbu $t1, 2150($t0)
    seq $t2, $t1, 0 # t2 = game.is_paused == 0
    lbu $t1, 2($t0)
    sgt $t1, $t1, 0 # t1 = game.level.brick_count> 0
    and $t2, $t2, $t1 # t2 = t1 && t2
    lw $t3, 2156($t0)
    sgt $t3, $t3, 0 # t3 = game.lives > 0
    and $t2, $t2, $t3 # t2 = t1 && t2 && t3
    beq $t2, 0, ENDIF_run_game_5
    IF_run_game_5:
        
        # // ####################### Compute Collisions
        
        # if (game.ball_vel.x == game.ball_vel.y == 0): skip collisions
        la $t0, game
        lw $t1, 2132($t0)
        lw $t2, 2136($t0)
        seq $t3, $t1, 0
        seq $t4, $t2, 0
        and $t3, $t3, $t4
        beq $t3, 1, END_run_game_compute_collisions
        
        # t1 = game->ball_vel.x
        # t2 = game->ball_vel.y
        la $t0, game
        lw $t1, 2132($t0)
        lw $t2, 2136($t0)
        
        # t4 = abs(t1)
        addi $t4, $t1, 0
        slt $t3, $t1, 0
        beq $t3, 0, ENDIF_run_game_8
        IF_run_game_8:
            neg $t4, $t1
        ENDIF_run_game_8:
        
        # t5 = abs(t2)
        addi $t5, $t2, 0
        slt $t3, $t2, 0
        beq $t3, 0, ENDIF_run_game_9
        IF_run_game_9:
            neg $t5, $t2
        ENDIF_run_game_9:
        
        # t3 = max(t5, t4)
        slt $t3, $t4, $t5
        beq $t3, 1, ELSE_run_game_5
        IF_run_game_10: # if (t5 <= t4)
            addi $t3, $t4, 0
            j ENDIF_run_game_10
        ELSE_run_game_5: # else // t4 < t5
            addi $t3, $t5, 0
        ENDIF_run_game_10:
        
        # t4 = t1 * 2^8,  t5 = t2 * 2^8  // Shift for accurate float division
        sll $t4, $t1, 8
        sll $t5, $t2, 8
        
        # t6 = t4 // t3    // x component of unit vector of velocity
        div $t4, $t3
        mflo $t6
        
        # t7 = t5 // t3   // y component of unit vector of velocity
        div $t5, $t3
        mflo $t7
        
        # 4($sp) = u.x (shifted)
        # 8($sp) = u.y (shifted)
        # 12($sp) = loop_amount = t3 = max(abs(vel.x), abs(vel.y))
        # 16($sp) = i  // loop variable
        # 20($sp) = future_x.x    // new unshifted accurate vector position equal to ball.pos + total_movement + u.x
        # 24($sp) = future_neg_x.x  // new unshifted accurate vector position equal to ball.pos + total_movement - u.x
        # 28($sp) = future_y.x    // Same but for y
        # 32($sp) = future_neg_y.x  // Same but for y
        # 36($sp) = collide_x
        # 40($sp) = collide_neg_x
        # 44($sp) = collide_y
        # 48($sp) = collide_neg_y
        # 52($sp) = total_movement.x (shifted) = 0
        # 56($sp) = total_movement.y (shifted) = 0
        # 60($sp) = b   // Brick loop variable
        # 64($sp) = w   // Wall loop variable
        # 68($sp) = ptr   // Stores pointer into Brick or Wall arrays
        # 72($sp) = future_x.y
        # 76($sp) = future_neg_x.y
        # 80($sp) = future_y
        # 84($sp) = future_neg_y.y
        # 88($sp) = brick_remove_count  // Used to decrement num_bricks after brick loop
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        li $t9, 0
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        li $t8, 0
        sw $t8, 0($sp)
        subi $sp, $sp, 4
        sw $t3, 0($sp)
        subi $sp, $sp, 4
        sw $t7, 0($sp)
        subi $sp, $sp, 4
        sw $t6, 0($sp)
        subi $sp, $sp, 4
        
        
        # Deducts life from the brick pointed to by local variable ptr and erases brick if gone
        # Also increments score. Called from brick loop
        j ENDFN_run_game_1
        FN_run_game_1:  # () -> void
            # brick.life--
            lw $t0, 68($sp)
            lw $t1, 0($t0)
            subi $t1, $t1, 1
            sw $t1, 0($t0)

            # if (brick.life == 0)
            bne $t1, 0, ELSE_run_game_8
            IF_run_game_13:
            
                # // Erase brick
                sw $ra, 0($sp)
                subi $sp, $sp, 4
                lw $t1, BG_COLOR
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t0)
                addi $t1, $t1, 10  # Shift for topbar
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 20($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_rect
                addi $sp, $sp, 4
                lw $ra, 0($sp)
                
                # game.score++
                la $t0, game
                lw $t1, 2152($t0)
                addi $t1, $t1, 1
                sw $t1, 2152($t0)
                
                # // Redraw score
                sw $ra, 0($sp)
                subi $sp, $sp, 4
                jal fn_game_update_score
                addi $sp, $sp, 4
                lw $ra, 0($sp)
                
                # brick_remove_count++  
                lw $t1, 88($sp)
                addi $t1, $t1, 1
                sw $t1, 88($sp)
                
                j ENDIF_run_game_13
            ELSE_run_game_8: # else: // Brick still alive
                # ptr->rect.color *= ptr->life / (ptr->life + 1)
                lw $t0, 68($sp)
                lw $t1, 0($t0)
                lbu $t2, 4($t0)  # // b
                lbu $t3, 5($t0)  # // g
                lbu $t4, 6($t0)  # // r
                addi $t5, $t1, 1
                sll $t1, $t1, 10 # // 10 shift for float accuracy
                div $t1, $t5
                mflo $t1 # // t1 = (life*2^10)/(life+1)
                mult $t2, $t1
                mflo $t2
                srl $t2, $t2, 10
                sb $t2, 4($t0)
                mult $t3, $t1
                mflo $t3
                srl $t3, $t3, 10
                sb $t3, 5($t0)
                mult $t4, $t1
                mflo $t4
                srl $t4, $t4, 10
                sb $t4, 6($t0)
                
                # // Redraw Brick
                lw $t0, 68($sp)
                sw $ra, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 4($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t0)
                addi $t1, $t1, 10  # Shift for topbar
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 20($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_rect
                addi $sp, $sp, 4
                lw $ra, 0($sp)
                
            ENDIF_run_game_13:
            
            # return
            jr $ra
        ENDFN_run_game_1:
        
        
        
        # // Loop max(abs(vel.x), abs(vel.y)) times because that times the unit vector will yield the velocity
        LOOP_run_game_2: # while (i < loop_amount)
            lw $t0, 16($sp)
            lw $t1, 12($sp)
            beq $t0, $t1, ENDLOOP_run_game_2
        
            # future_x = Vec(game.ball_pos.x + unshift(total_movement.x + u.x), 
            #                game.ball_pos.y + unshift(total_movement.y))
            la $t0, game
            lw $t1, 2124($t0)  # t1 = ball_pos.x
            lw $t2, 2128($t0)  # t2 = ball_pos.y
            lw $t3, 52($sp)  # t3 = total_movement.x
            lw $t4, 56($sp)  # t4 = total_movement.y
            lw $t5, 4($sp)  # t5 = u.x
            lw $t6, 8($sp)  # t6 = u.y
            subi $sp, $sp, 4 # 8($sp) = free
            subi $sp, $sp, 4 # 4($sp) = free
            
            add $t7, $t3, $t5  # t7 = total_movement.x + u.x
            
            sw $t7, 0($sp) # 4($sp) = round(total_movement.x + u.x)
            subi $sp, $sp, 4
            li $t7, 8
            sw $t7, 0($sp)
            subi $sp, $sp, 4
            jal fn_round
            addi $sp, $sp, 4
            lw $t7, 0($sp)
            sw $t7, 4($sp)
            
            lw $t4, 64($sp) # // 56 normally, 64 to account for 8 sp shift
            sw $t4, 0($sp) # t8 = round(total_movement.y)
            subi $sp, $sp, 4
            li $t8, 8
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            jal fn_round
            addi $sp, $sp, 4
            lw $t8, 0($sp)
            
            lw $t7, 4($sp)
            la $t0, game
            lw $t1, 2124($t0)
            add $t7, $t1, $t7  # t7 = ball_pos.x + round(total_movement.x + u.x)
            lw $t2, 2128($t0)
            add $t8, $t2, $t8  # t8 = ball_pos.y + round(total_movement.y)
            sw $t7, 28($sp)  # future_x = Vec(t7, t8)  // 20, 72 normally
            sw $t8, 80($sp)
            sw $t8, 8($sp) # 8($sp) = ball_pos.y + round(total_movement.y)
            
            
            
            # future_neg_x = Vec(game.ball_pos.x + unshift(total_movement.x - u.x), 
            #                game.ball_pos.y + unshift(total_movement.y))
            lw $t3, 60($sp) # // total_movement.x, 52 normally, + 8
            lw $t5, 12($sp) # // u.x, 4 normally
            sub $t7, $t3, $t5  # t7 = total_movement.x - u.x
            
            sw $t7, 0($sp)
            subi $sp, $sp, 4
            li $t8, 8
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            jal fn_round
            addi $sp, $sp, 4
            lw $t7, 0($sp) # t7 = round(total_movement.x - u.x)
            
            la $t0, game
            lw $t1, 2124($t0)
            add $t7, $t1, $t7  # t7 = ball_pos.x + round(total_movement.x - u.x)
            sw $t7, 32($sp)  # future_neg_x = Vec(ball_pos.x + round(total_movement.x - u.x), 
            lw $t8, 8($sp)   #                    ball_pos.y + round(total_movement.y))  // 24, 76 normally
            sw $t8, 84($sp)
            
            
            
            # future_y = Vec(game.ball_pos.x + unshift(total_movement.x), 
            #                game.ball_pos.y + unshift(total_movement.y + u.y))
            lw $t3, 60($sp)  # // total_movement.x, 52 normally
            sw $t3, 0($sp)
            subi $sp, $sp, 4
            li $t8, 8
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            jal fn_round
            addi $sp, $sp, 4
            lw $t7, 0($sp) # 4($sp) = round(total_movement.x)
            sw $t7, 4($sp)
            
            lw $t4, 64($sp) # // total_movement.y, 56 normally
            lw $t6, 16($sp) # // u.y, 8 normally
            add $t8, $t4, $t6  # t8 = total_movement.y + u.y
            
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            li $t8, 8
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            jal fn_round
            addi $sp, $sp, 4
            lw $t8, 0($sp) # t8 = round(total_movement.y + u.y)
            
            lw $t7, 4($sp)
            la $t0, game
            lw $t1, 2124($t0) 
            add $t7, $t1, $t7  # t7 = ball_pos.x + round(total_movement.x)
            la $t0, game
            lw $t2, 2128($t0) 
            add $t8, $t2, $t8  # t8 = ball_pos.y + round(total_movement.y + u.y)
            sw $t7, 36($sp)  # future_y = Vec(t7, t8)  // 28, 80 normally
            sw $t8, 88($sp)
            
            
            
            # future_neg_y = Vec(game.ball_pos.x + unshift(total_movement.x), 
            #                game.ball_pos.y + unshift(total_movement.y - u.y))
            lw $t4, 64($sp) # // total_movement.y, 56 normally
            lw $t6, 16($sp) # // u.y, 8 normally
            sub $t8, $t4, $t6  # t8 = total_movement.y - u.y
            
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            li $t8, 8
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            jal fn_round
            addi $sp, $sp, 4
            lw $t8, 0($sp) # t8 = round(total_movement.y - u.y)
            
            la $t0, game 
            lw $t2, 2128($t0)
            add $t8, $t2, $t8  # t8 = ball_pos.y + round(total_movement.y - u.y)
            lw $t7, 4($sp) # t7 = round(total_movement.x)
            lw $t1, 2124($t0) # ball_pos.x
            add $t7, $t7, $t1 # t7 = ball_pos.x + round(total_movement.x)
            sw $t7, 40($sp)  # future_neg_y = Vec(ball_pos.x + round(total_movement.x), t8) // 32, 84 normally
            sw $t8, 92($sp)
    
            addi $sp, $sp, 8 # // Pop two temporary variables off stack
    
    
    
            # collide_x, collide_neg_x, collide_y, collide_neg_y = 0
            li $t0, 0
            sw $t0, 36($sp)
            sw $t0, 40($sp)
            sw $t0, 44($sp)
            sw $t0, 48($sp)
        
            # b = 0
            li $t0, 0
            sw $t0, 60($sp)
            
            # ptr = &(game.level.bricks)
            la $t0, game
            addi $t0, $t0, 4
            sw $t0, 68($sp)
            
            # brick_remove_count = 0
            li $t1, 0
            sw $t1, 88($sp)
            
            LOOP_run_game_3: # while (b < num_bricks)
                la $t0, game
                lbu $t1, 2($t0)
                lw $t2, 60($sp)
                beq $t1, $t2, ENDLOOP_run_game_3
            
                # if (ptr->life != 0)   // Brick != NULL
                lw $t0, 68($sp)
                lw $t1, 0($t0)
                beq $t1, 0, ENDIF_run_game_11
                IF_run_game_11:
                    # if (rect_collide(brick, future_x))
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 36($sp)  # future_x.x   // 20($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 92($sp)  # future_x.y   // 72($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_12
                    IF_run_game_12:
                        # collide_x = 1
                        li $t1, 1
                        sw $t1, 36($sp)
                        
                        # // Deducts brick life. If brick 0 lives, removes it and adds score
                        jal FN_run_game_1
                        
                    ENDIF_run_game_12:
                    
                    
                    # if (rect_collide(brick, future_y))
                    lw $t0, 68($sp)
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 44($sp)  # future_y.x    // 28($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 100($sp)  # future_y.y   // 80($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_14
                    IF_run_game_14:
                        # collide_y = 1
                        li $t1, 1
                        sw $t1, 44($sp)
                        
                        # if (ptr->life != 0)  // Brick != NULL, which means that it was just deleted by future_x
                        lw $t1, 68($sp)
                        lw $t1, 0($t1)
                        beq $t1, 0, ENDIF_run_game_30
                        IF_run_game_30:
                            # // Deducts brick life. If brick 0 lives, removes it and adds score.
                            jal FN_run_game_1
                        ENDIF_run_game_30:
                        
                    ENDIF_run_game_14:
                    
                    
                    
                    # if (rect_collide(brick, future_neg_x))
                    lw $t0, 68($sp)
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 40($sp)  # future_neg_x.x   // 24($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 96($sp)  # future_neg_x.y   // 76($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_15
                    IF_run_game_15:
                        # collide_neg_x = 1
                        li $t1, 1
                        sw $t1, 40($sp)
                    ENDIF_run_game_15:
                    
                    
                    
                    # if (rect_collide(brick, future_neg_y))
                    lw $t0, 68($sp)
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 48($sp)  # future_neg_y.x   // 32($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 104($sp)  # future_neg_y.y   // 84($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_16
                    IF_run_game_16:
                        # collide_neg_y = 1
                        li $t1, 1
                        sw $t1, 48($sp)
                    ENDIF_run_game_16:
                    
                    # b++
                    lw $t0, 60($sp)
                    addi $t0, $t0, 1
                    sw $t0, 60($sp)
                    
                ENDIF_run_game_11:
            
                # ptr += sizeof(brick)      // 24
                lw $t0, 68($sp)
                addi $t0, $t0, 24
                sw $t0, 68($sp)
            
                j LOOP_run_game_3
            ENDLOOP_run_game_3:
            
            # game.level.num_bricks -= brick_remove_count
            la $t0, game
            lw $t1, 88($sp)
            lbu $t2, 2($t0)
            sub $t2, $t2, $t1
            sb $t2, 2($t0)
            
            # w = 0
            li $t0, 0
            sw $t0, 64($sp)
            
            # ptr = &(game.level.walls)
            la $t0, game
            addi $t0, $t0, 1924
            sw $t0, 68($sp)
            
            LOOP_run_game_4: # while (w < game.level.num_walls)
                la $t0, game
                lbu $t1, 1($t0)
                lw $t2, 64($sp)
                beq $t1, $t2, ENDLOOP_run_game_4
            
                # if (ptr->color != ff000000)    // Wall != NULL
                lw $t0, 68($sp)
                lw $t1, 0($t0)
                srl $t1, $t1, 24
                beq $t1, 255, ENDIF_run_game_17  # // 255 = 0xff
                IF_run_game_17:
                
                    # if (rect_collide(wall, future_x))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 36($sp)  # future_x.x   // 20($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 92($sp)  # future_x.y     // 72($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_18
                    IF_run_game_18:
                        # collide_x = 1
                        li $t1, 1
                        sw $t1, 36($sp)
                    ENDIF_run_game_18:
                
                
                    # if (rect_collide(wall, future_neg_x))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 40($sp)  # future_neg_x.x     // 24($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 96($sp)  # future_neg_x.y     // 76($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_19
                    IF_run_game_19:
                        # collide_neg_x = 1
                        li $t1, 1
                        sw $t1, 40($sp)
                    ENDIF_run_game_19:
                
                
                
                    # if (rect_collide(wall, future_y))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 44($sp)  # future_y.x     // 28($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 100($sp)  # future_y.y    // 80($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_20
                    IF_run_game_20:
                        # collide_y = 1
                        li $t1, 1
                        sw $t1, 44($sp)
                    ENDIF_run_game_20:
                
                
                    # if (rect_collide(wall, future_neg_y))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 48($sp)  # future_neg_y.x    // 32($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 104($sp)  # future_neg_y.y     // 84($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_21
                    IF_run_game_21:
                        # collide_neg_y = 1
                        li $t1, 1
                        sw $t1, 48($sp)
                    ENDIF_run_game_21:
                
                
                    # w++
                    lw $t0, 64($sp)
                    addi $t0, $t0, 1
                    sw $t0, 64($sp)
                    
                ENDIF_run_game_17:
            
                # ptr += sizeof(Rect)      // 20
                lw $t0, 68($sp)
                addi $t0, $t0, 20
                sw $t0, 68($sp)
            
                j LOOP_run_game_4
            ENDLOOP_run_game_4:
        
            
            # if (rect_collide(paddle, future_x))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 36($sp)  # future_x.x      // 20($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 92($sp)  # future_x.y      // 72($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_22
            IF_run_game_22:
                # collide_x = 1
                li $t1, 1
                sw $t1, 36($sp)
            ENDIF_run_game_22:
            
            
            
            
            # if (rect_collide(paddle, future_neg_x))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 40($sp)  # future_neg_x.x     // 24($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 96($sp)  # future_neg_x.y     // 76($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_23
            IF_run_game_23:
                # collide_neg_x = 1
                li $t1, 1
                sw $t1, 40($sp)
            ENDIF_run_game_23:
        
        
        
            # if (rect_collide(paddle, future_y))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 44($sp)  # future_y.x      // 28($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 100($sp)  # future_y.y      // 80($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_24
            IF_run_game_24:
                # collide_y = 1
                li $t1, 1
                sw $t1, 44($sp)
                
                # // Compute new ball angle
                la $t0, game
                
                # t1 middle = paddle_pos.x + 12  // x position of middle of paddle
                lw $t1, 2140($t0)
                addi $t1, $t1, 12
                
                # t2 dist = (ball_pos.x - middle)
                lw $t2, 2124($t0)
                sub $t2, $t2, $t1
                
                # print()
                # li $v0, 4
                # la $a0, NEWLINE
                # syscall
                # # print(dist)
                # li $v0, 1
                # addi $a0, $t2, 0
                # syscall 
                # li $v0, 4
                # la $a0, NEWLINE
                # syscall
                
                # t3 frac = abs(dist) / 20   (shifted)    // Max distance from center is 13, so 13/20 is max fraction
                slt $t3, $t2, 0
                beq $t3, 0, ELSE_run_game_9
                IF_run_game_31: # if (dist < 0)
                    neg $t3, $t2 # t3 = -t2
                    j ENDIF_run_game_31
                ELSE_run_game_9: # else (dist >= 0)
                    addi $t3, $t2, 0 # t3 = t2
                ENDIF_run_game_31:
                sll $t3, $t3, 10 # // Shift for float accuracy
                li $t4, 20
                div $t3, $t4
                mflo $t3
                
                # print(frac)
                # li $v0, 1
                # addi $a0, $t3, 0
                # syscall 
                # li $v0, 4
                # la $a0, NEWLINE
                # syscall
                
                # print(ball_vel)
                # li $v0, 1
                # lw $a0, 2132($t0)
                # syscall 
                # li $v0, 4
                # la $a0, SPACE
                # syscall
                # li $v0, 1
                # lw $a0, 2136($t0)
                # syscall 
                # li $v0, 4
                # la $a0, NEWLINE
                # syscall
                
                # t4 transfer_signed = round(ball_vel.y * frac)  // Amount of vertical velocity to transfer to horizontal
                lw $t4, 2136($t0)
                mult $t4, $t3
                mflo $t4
                
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                sw $t2, 0($sp)
                subi $sp, $sp, 4
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                sw $t4, 0($sp)
                subi $sp, $sp, 4
                li $t8, 10
                sw $t8, 0($sp)
                subi $sp, $sp, 4
                jal fn_round
                addi $sp, $sp, 4
                lw $t4, 0($sp)
                addi $sp, $sp, 4
                lw $t3, 0($sp)
                addi $sp, $sp, 4
                lw $t2, 0($sp)
                addi $sp, $sp, 4
                lw $t1, 0($sp)
                la $t0, game
                
                # t5 transfer_abs = abs(transfer) 
                slt $t5, $t4, 0
                beq $t5, 0, ELSE_run_game_10
                IF_run_game_32: # if (transfer_signed < 0)
                    neg $t5, $t4 # t5 = -t4
                    j ENDIF_run_game_32
                ELSE_run_game_10: # else (transfer_signed >= 0)
                    addi $t5, $t4, 0 # t5 = t4
                ENDIF_run_game_32:
                
                # print(transfer, transfer_abs)
                # li $v0, 1
                # addi $a0, $t4, 0
                # syscall 
                # li $v0, 4
                # la $a0, SPACE
                # syscall
                # li $v0, 1
                # addi $a0, $t5, 0
                # syscall 
                # li $v0, 4
                # la $a0, NEWLINE
                # syscall
                
                lw $t6, 2132($t0)
                slt $t7, $t6, 0
                slt $t8, $t2, 0
                sgt $t9, $t2, 0
                and $s0, $t7, $t8
                beq $s0, 1, IF_run_game_33
                and $s0, $t7, $t9 
                beq $s0, 1, ELIF_run_game_1
                beq $t8, 1, ELIF_run_game_2
                beq $t9, 1, ELIF_run_game_3
                j ENDIF_run_game_33
                # if (ball_vel.x < 0 && dist < 0)   // Moving left, hit left paddle side
                IF_run_game_33:    
                    # ball_vel.y -= transfer_signed    // deducts velocity, works for neg and positive (e.g  1/5 * -5 = -1,  -5 - -1 = -4)
                    # lw $t6, 2136($t0)
                    # sub $t6, $t6, $t4
                    # sw $t6, 2136($t0)
                    # ball_vel.x -= transfer_abs   // Modifies horizontal velocity
                    lw $t6, 2132($t0)
                    sub $t6, $t6, $t5
                    sw $t6, 2132($t0)
                    
                    j ENDIF_run_game_33
                # else if (ball_vel.x < 0 && dist > 0 )  // Moving left, hit right paddle side
                ELIF_run_game_1:
                    # ball_vel.y += transfer_signed    // adds velocity
                    # lw $t6, 2136($t0)
                    # add $t6, $t6, $t4
                    # sw $t6, 2136($t0)
                    # ball_vel.x += transfer_abs   // Modifies horizontal velocity
                    lw $t6, 2132($t0)
                    add $t6, $t6, $t5
                    sw $t6, 2132($t0)
                    
                    j ENDIF_run_game_33
                # else if (dist < 0)  // Moving right, hit left paddle side
                ELIF_run_game_2:
                    # ball_vel.y += transfer_signed    // adds velocity (turned out to be a bad idea)
                    # lw $t6, 2136($t0)
                    # add $t6, $t6, $t4
                    # sw $t6, 2136($t0)
                    # ball_vel.x -= transfer_abs   // Modifies horizontal velocity
                    lw $t6, 2132($t0)
                    sub $t6, $t6, $t5
                    sw $t6, 2132($t0)
                    
                    j ENDIF_run_game_33
                # else if (dist > 0) // Moving right, hit right paddle side
                ELIF_run_game_3:
                    # ball_vel.y -= transfer_signed    // deducts velocity, works for neg and positive (e.g  1/5 * -5 = -1,  -5 - -1 = -4)
                    # lw $t6, 2136($t0)
                    # sub $t6, $t6, $t4
                    # sw $t6, 2136($t0)
                    # ball_vel.x += transfer_abs   // Modifies horizontal velocity
                    lw $t6, 2132($t0)
                    add $t6, $t6, $t5
                    sw $t6, 2132($t0)
                ENDIF_run_game_33:
                
                # print(ball_vel)
                # li $v0, 1
                # lw $a0, 2132($t0)
                # syscall 
                # li $v0, 4
                # la $a0, SPACE
                # syscall
                # li $v0, 1
                # lw $a0, 2136($t0)
                # syscall 
                # li $v0, 4
                # la $a0, NEWLINE
                # syscall
                
            ENDIF_run_game_24:
        
        
            # if (rect_collide(paddle, future_neg_y))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 48($sp)  # future_neg_y.x      // 32($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 104($sp)  # future_neg_y.y     // 84($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_25
            IF_run_game_25:
                # collide_neg_y = 1
                li $t1, 1
                sw $t1, 48($sp)
            ENDIF_run_game_25:
        
            
            # if (collide_x)
            lw $t0, 36($sp)
            bne $t0, 1, ELSE_run_game_6
            IF_run_game_26:
                # game.ball_vel.x *= -1   // Collision so invert velocity
                la $t0, game
                lw $t1, 2132($t0)
                neg $t1, $t1
                sw $t1, 2132($t0)
                
                # u.x *= -1    // Invert unit vector velocity
                lw $t1, 4($sp)
                neg $t1, $t1
                sw $t1, 4($sp)
                
                # if (!collide_neg_x)    // Immediately apply opposite movement unless obstructed
                lw $t0, 40($sp)
                beq, $t0, 1, ENDIF_run_game_27
                IF_run_game_27:
                
                    # total_movement.x += u.x
                    lw $t0, 52($sp)
                    lw $t1, 4($sp)
                    add $t0, $t0, $t1
                    sw $t0, 52($sp)
                
                ENDIF_run_game_27:
                
                j ENDIF_run_game_26
            ELSE_run_game_6: # else:
                # total_movement.x += u.x   // Move ball in that direction, no collision so we safe
                lw $t0, 52($sp)
                lw $t1, 4($sp)
                add $t0, $t0, $t1
                sw $t0, 52($sp)
            ENDIF_run_game_26:
            
            
            
            # if (collide_y)
            lw $t0, 44($sp)
            bne $t0, 1, ELSE_run_game_7
            IF_run_game_28:
                # game.ball_vel.y *= -1   // Collision so invert velocity
                la $t0, game
                lw $t1, 2136($t0)
                neg $t1, $t1
                sw $t1, 2136($t0)
                
                # u.y *= -1    // Invert unit vector velocity
                lw $t1, 8($sp)
                neg $t1, $t1
                sw $t1, 8($sp)
                
                # if (!collide_neg_y)    // Immediately apply opposite movement unless obstructed
                lw $t0, 48($sp)
                beq, $t0, 1, ENDIF_run_game_29
                IF_run_game_29:
                
                    # total_movement.y += u.y
                    lw $t0, 56($sp)
                    lw $t1, 8($sp)
                    add $t0, $t0, $t1
                    sw $t0, 56($sp)
                
                ENDIF_run_game_29:
                
                j ENDIF_run_game_28
            ELSE_run_game_7: # else:
                # total_movement.y += u.y   // Move ball in that direction, no collision so we safe
                lw $t0, 56($sp)
                lw $t1, 8($sp)
                add $t0, $t0, $t1
                sw $t0, 56($sp)
            ENDIF_run_game_28:
            
            
            ####### DEBUG: Draws path trace on every velocity calculation
            # la $t0, game
            # lw $t1, 2124($t0)
            # lw $t2, 2128($t0)
            
            # lw $t3, 52($sp)
            # sra $t3, $t3, 8
            # lw $t4, 56($sp)
            # sra $t4, $t4, 8
            
            # add $t1, $t1, $t3  # t1 = game.ball_pos.x + unshift(total_movement.x)
            # add $t2, $t2, $t4  # t2 = game.ball_pos.y + unshift(total_movement.y)
            
            # li $t8, 0x0000ffff
            # sw $t8, 0($sp)
            # subi $sp, $sp, 4
            
            # sw $t1, 0($sp)
            # subi $sp, $sp, 4
            
            # addi $t2, $t2, 10
            # sw $t2, 0($sp)
            # subi $sp, $sp, 4
            
            # li $t1, 3
            # sw $t1, 0($sp)
            # subi $sp, $sp, 4
            
            # li $t1, 3
            # sw $t1, 0($sp)
            # subi $sp, $sp, 4
            # jal fn_draw_rect
            ########################################
            
            # i++
            lw $t0, 16($sp)
            addi $t0, $t0, 1
            sw $t0, 16($sp)
            j LOOP_run_game_2
        ENDLOOP_run_game_2:
        
        # print(total_movement)
        # li $v0, 1
        # lw $a0, 52($sp)
        # syscall
        # li $v0, 4
        # la $a0, SPACE
        # syscall
        # li $v0, 1
        # lw $a0, 56($sp)
        # syscall 
        # li $v0, 4
        # la $a0, NEWLINE
        # syscall
        
        # draw_rect(Rect(BG_COLOR, game.ball_pos, Vec(3, 3)))    // Erase Ball
        la $t0, game
        lw $t1, BG_COLOR
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2124($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2128($t0)
        addi $t1, $t1, 10   # // shift for topbar
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # game.ball_pos += round(total_movement)
        lw $t3, 52($sp)  # round(total_movement.x)
        sw $t3, 0($sp) 
        subi $sp, $sp, 4
        li $t8, 8
        sw $t8, 0($sp)
        subi $sp, $sp, 4
        jal fn_round
        
        lw $t4, 60($sp)  # round(total_movement.y)
        sw $t4, 0($sp)
        subi $sp, $sp, 4
        li $t8, 8
        sw $t8, 0($sp)
        subi $sp, $sp, 4
        jal fn_round
        
        addi $sp, $sp, 4
        lw $t4, 0($sp) # t4 = round(total_movement.y)
        addi $sp, $sp, 4
        lw $t3, 0($sp) # t3 = round(total_movement.x)
        
        # print(t3, t4)
        # li $v0, 1
        # addi $a0, $t3, 0
        # syscall
        # li $v0, 4
        # la $a0, SPACE
        # syscall
        # li $v0, 1
        # addi $a0, $t4, 0
        # syscall
        # li $v0, 4
        # la $a0, NEWLINE
        # syscall
        
        la $t0, game
        lw $t1, 2124($t0)
        lw $t2, 2128($t0)
        
        add $t1, $t1, $t3  # t1 = game.ball_pos.x + round(total_movement.x)
        add $t2, $t2, $t4  # t2 = game.ball_pos.y + round(total_movement.y)
        sw $t1, 2124($t0)
        sw $t2, 2128($t0)
        
        # print(ball_pos)
        # li $v0, 1
        # addi $a0, $t1, 0
        # syscall
        # li $v0, 4
        # la $a0, SPACE
        # syscall
        # li $v0, 1
        # addi $a0, $t2, 0
        # syscall 
        # li $v0, 4
        # la $a0, NEWLINE
        # syscall
        
        # draw_rect(Rect(WHITE, game.ball_pos, Vec(3, 3)))    // Draw new ball
        la $t0, game
        li $t1, 0x00ffffff
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2124($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2128($t0)
        addi $t1, $t1, 10   # // shift for topbar
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # // Pop stack variables
        addi $sp, $sp, 88  
        
        END_run_game_compute_collisions: # // Used as a marker to skip if velocity is (0,0)
    
        # // ####################### End Compute Collisions
        
        
        # // ####################### Paddle Movement, Ball Launching
        
        lw $t1, 4($sp)
        lw $t2, 8($sp)
        seq $t3, $t2, 97 # // 'a'
        and $t3, $t3, $t1
        beq $t3, 1, IF_run_game_34
        seq $t4, $t2, 100 # // 'd'
        and $t4, $t4, $t1
        beq $t4, 1, ELIF_run_game_4
        seq $t4, $t2, 32 # // ' '
        and $t4, $t4, $t1
        beq $t4, 1, ELIF_run_game_5
        j ENDIF_run_game_34
        IF_run_game_34: # if (keyboard.is_pressed && keyboard.key == 'a')
            # game.paddle_pos.x -= 5
            li $t1, -7
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_move_paddle
            
            j ENDIF_run_game_34
        ELIF_run_game_4: # elif (keyboard.is_pressed && keyboard.key == 'd')
            # game.paddle_pos.x += 5
            li $t1, 7
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_move_paddle
            
            j ENDIF_run_game_34
        ELIF_run_game_5: # elif (keyboard.is_pressed && keyboard.key == ' ')
            
            # if (ball_vel.x == bell_vel.y == 0)
            la $t0, game
            lw $t1, 2132($t0)
            lw $t2, 2136($t0)
            seq $t3, $t1, 0
            seq $t4, $t2, 0
            and $t3, $t3, $t4
            bne $t3, 1, ENDIF_run_game_35
            IF_run_game_35:
                # game.ball_vel.x = random(-4, 4), game.ball_vel.y = random(-6, -3)
                li $v0, 42
                li $a0, 0
                li $a1, 9
                syscall
                subi $a0, $a0, 4
                sw $a0, 2132($t0)
                
                li $a0, 0
                li $a1, 2
                syscall
                addi $a0, $a0, 3
                neg $a0, $a0
                sw $a0, 2136($t0)
            ENDIF_run_game_35:
        
        ENDIF_run_game_34:
        
        # // ####################### End Paddle Movement, Ball Launching
        
        
        # // ####################### Detect win or loss, draw game over or win screen
        
        # if (game.level.num_bricks == 0) // All bricks destroyed
        la $t0, game
        lbu $t1, 2($t0)
        bne $t1, 0, ENDIF_run_game_36
        IF_run_game_36:
            
            # // Draw win screen bitmap
            li $t1, 19
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 45
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_YOU_WIN
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
        ENDIF_run_game_36:
        

        
        # if (game.ball_pos.y >= 118)  // Ball out of bounds
        la $t0, game
        lw $t1, 2128($t0)
        blt $t1, 118, ENDIF_run_game_37
        IF_run_game_37:
            # game.lives--
            lw $t1, 2156($t0)
            subi $t1, $t1, 1
            sw $t1, 2156($t0)
            
            # if (game.lives > 0)
            beq $t1, 0, ELSE_run_game_11
            IF_run_game_38:
                # /******* STATE CHANGE ********
            
                # dirty = 1
                li $t2, 1
                sb $t2, dirty
                
                j ENDIF_run_game_38
            ELSE_run_game_11: # else // game.lives <= 0
                
                # // Draw game over screen
                li $t1, 19
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                li $t1, 45
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                la $t1, BMP_GAME_OVER
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_bitmap
                
            ENDIF_run_game_38:
            
        ENDIF_run_game_37:
        
        # // ####################### END Detect win or loss, draw game over or win screen
        
        # Delay
        li $v0, 32
        li $a0, 40
        syscall
        
    ENDIF_run_game_5:
    # // ############ END MAIN GAME FUNCTIONALITY
    
    
    
    
    # // ############ GAMEOVER AND WIN SCREEN TRANSITION
    
    # if (keyboard.is_pressed && keyboard.key == ' ')
    lw $t1, 4($sp)
    lw $t2, 8($sp)
    seq $t3, $t1, 1
    seq $t4, $t2, 32 # // ' '
    and $t3, $t3, $t4
    bne $t3, 1, ENDIF_run_game_39
    IF_run_game_39:
        
        la $t0, game
        lw $t1, 2156($t0)
        beq $t1, 0, IF_run_game_40
        lbu $t1, 2($t0)
        beq $t1, 0, ELIF_run_game_6
        j ENDIF_run_game_40
        IF_run_game_40: # if (game.lives == 0)  // Game over
            
            # // Update high score only if in play mode (i.e playing a selected level wont count towards highscore)
            la $t0, game
            lbu $t1, 2148($t0)
            bne $t1, 0, ENDIF_run_game_42
            IF_run_game_42: # if (game.mode_mask == 00)
            
                la $t0, menu_state
                la $t1, game
                lw $t2, 2152($t1) # // game score
                lw $t3, 4($t0) # // high score
                ble $t2, $t3, ENDIF_run_game_41 
                IF_run_game_41: # if (score > highscore)
                    # menu_state.highscore = game.score
                    sw $t2, 4($t0)
                ENDIF_run_game_41:
            
            ENDIF_run_game_42:
            
            # dirty = 1, menu_state.state = 0  // Return to menu
            li $t1, 1
            sb $t1, dirty
            la $t0, menu_state
            li $t1, 0
            sb $t1, 0($t0)
        
            j ENDIF_run_game_40
            
        ELIF_run_game_6: # elif (game.level.num_bricks == 0)   // Win
          
            # if (game.mode_mask == 00)  // play mode
            la $t0, game
            lbu $t1, 2148($t0)
            bne $t1, 0, ELSE_run_game_12
            IF_run_game_43:
                
                # // Update max unlocked level
                la $t1, menu_state
                lbu $t2, 2149($t0) # // game level idx
                lbu $t3, 2($t1) # // max unlocked
                ble $t2, $t3, ENDIF_run_game_44
                IF_run_game_44: # if (game.level_idx > menu_state.max_unlocked)
                    # menu_state.max_unlocked = game.level_idx
                    sw $t2, 2($t1)
                ENDIF_run_game_44:
                
                beq $t2, 4, IF_run_game_45
                addi $t2, $t2, 1
                la $t3, regular_levels
                li $t4, 2124  # // t4 = (game.level_idx + 1) * sizeof(Level)
                mult $t2, $t4
                mflo $t4
                add $t3, $t3, $t4
                lbu $t5, 3($t3)
                beq $t5, 1, IF_run_game_45
                j ELSE_run_game_13
                IF_run_game_45: # if (game.level_idx == 4 || regular_levels[game.level_idx + 1] == NULL)
                    # /*********** STATE TRANSITION ************/  Game, First Level
                    
                    # dirty = 1
                    li $t1, 1
                    sb $t1, dirty
                    
                    # game.level_idx = 0
                    la $t0, game
                    li $t1, 0
                    sb $t1, 2149($t0)
                    
                    j ENDIF_run_game_45
                ELSE_run_game_13: # else:
                    # /*********** STATE TRANSITION ************/  Game, Next Level
                    
                    # dirty = 1
                    li $t1, 1
                    sb $t1, dirty
                    
                    # game.level_idx++
                    la $t0, game
                    lbu $t1, 2149($t0)
                    addi $t1, $t1, 1
                    sb $t1, 2149($t0)
                
                ENDIF_run_game_45:
            
                j ENDIF_run_game_43
            ELSE_run_game_12: # else: // Not in play mode
                
                # menu_state.state = 0
                la $t0, menu_state
                li $t1, 0
                sb $t1, 0($t0)
                
                # dirty = 1
                li $t1, 1,
                sb $t1, dirty
                
            ENDIF_run_game_43:
          
        ENDIF_run_game_40:    
      
    ENDIF_run_game_39:
    # // ############ END GAMEOVER AND WIN SCREEN TRANSITION
    
    
    
    
    # // ############ PAUSING FUNCTIONALITY
    # if (keyboard.is_pressed && keyboard.key == 'p')
    lw $t1, 4($sp)
    seq $t2, $t1, 1
    lw $t1, 8($sp)
    seq $t3, $t1, 112
    and $t2, $t2, $t3
    bne $t2, 1, ENDIF_run_game_6
    IF_run_game_6:
        la $t0, game
        
        # // Toggle pause
        lbu $t1, 2150($t0)
        beq $t1, 0, ELSE_run_game_4
        IF_run_game_7: # if (game->is_paused)
            # game->is_paused = 0
            li $t1, 0
            sb $t1, 2150($t0)
            
            j ENDIF_run_game_7
        ELSE_run_game_4: # else // !game->is_paused
            # game->is_paused = 1
            li $t1, 1
            sb $t1, 2150($t0)
        ENDIF_run_game_7:
        
        # game_update_paused() // update pause icon graphic
        jal fn_game_update_paused
    ENDIF_run_game_6:
    # // ############ END PAUSING FUNCTIONALITY
 

    # return
    addi $sp, $sp, 8 # // Pop keyboard local vars
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra



## DRAWING FUNCTIONS: ########################################


# Erase and redraw editor topbar
fn_draw_editor_topbar: # () -> void
    sw $ra, 0($sp)
    sub $sp, $sp, 4
    
    # // Clear topbar
    lw $t1, BG_COLOR
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 0
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 128
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 10
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_rect
    
    # // Draw RGB text and lives icon
    li $t1, 1
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 0
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    la $t1, BMP_EDITOR_RGB_TEXT
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_bitmap
    
    li $t1, 101
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 0
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    la $t1, BMP_HEART
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_bitmap
    
    
    # // Draw RGB
    la $t0, editor
    lbu $t3, 30($t0) # // Red
    li $t1, 30
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    sw $t3, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_int
    
    la $t0, editor
    lbu $t1, 1($t0) # // rgb_sel
    bne $t1, 1, ENDIF_draw_editor_topbar_1
    IF_draw_editor_topbar_1: # if (rgb_sel == 1) // Red
        # // Draw underline
        li $t1, 0x00ff0000
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 29
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 17
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        jal fn_draw_rect
    ENDIF_draw_editor_topbar_1:
    
    la $t0, editor
    lbu $t3, 29($t0) # // Green
    li $t1, 55
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    sw $t3, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_int
    
    la $t0, editor
    lbu $t1, 1($t0) # // rgb_sel
    bne $t1, 2, ENDIF_draw_editor_topbar_2
    IF_draw_editor_topbar_2: # if (rgb_sel == 2) // Green
        # // Draw underline
        li $t1, 0x00ff0000
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 54
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 17
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        jal fn_draw_rect
    ENDIF_draw_editor_topbar_2:
    
    la $t0, editor
    lbu $t3, 28($t0) # // Blue
    li $t1, 80
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    sw $t3, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_int
    
    la $t0, editor
    lbu $t1, 1($t0) # // rgb_sel
    bne $t1, 3, ENDIF_draw_editor_topbar_3
    IF_draw_editor_topbar_3: # if (rgb_sel == 3) // Blue
        # // Draw underline
        li $t1, 0x00ff0000
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 79
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 17
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        jal fn_draw_rect
    ENDIF_draw_editor_topbar_3:
    
    # // Draw lives value
    la $t0, editor
    lbu $t3, 3($t0) # // lives
    li $t1, 115
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    sw $t3, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_int
    
    la $t0, editor
    lbu $t1, 1($t0) # // rgb_sel
    bne $t1, 4, ENDIF_draw_editor_topbar_4
    IF_draw_editor_topbar_4: # if (rgb_sel == 4) // lives
        # // Draw underline
        li $t1, 0x00ff0000
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 115
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 10
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        sub $sp, $sp, 4
        jal fn_draw_rect
    ENDIF_draw_editor_topbar_4:
    
    # return
    add $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra


# Erase and redraw editor main screen
fn_draw_editor_main: # () -> void
    sw $ra, 0($sp)
    sub $sp, $sp, 4
    
    # // Clear main screen
    lw $t1, BG_COLOR
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 0
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 10
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 128
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    li $t1, 118
    sw $t1, 0($sp)
    sub $sp, $sp, 4
    jal fn_draw_rect
    
    # // Draw level
    la $t0, custom_levels
    lbu $t1, editor
    li $t2, 2124
    mult $t1, $t2
    mflo $t2
    add $t0, $t0, $t2
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_level
    
    # // Draw paddle
    li $t1, 0x00ffffff
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 50
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 120
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 25
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # // Draw ball
    li $t1, 0x00ffffff
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 60
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 112
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # // Draw Cursor
    la $t0, editor
    lw $t1, 4($t0)
    subi $t1, $t1, 1
    lw $t2, 8($t0)
    addi $t2, $t2, 10 # // Topbar
    subi $t2, $t2, 1
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    la $t1, BMP_EDITOR_CURSOR
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # // Draw selection box
    la $t0, editor
    lw $t1, 12($t0) # corner1.x
    lw $t2, 16($t0) # corner1.y
    addi $t2, $t2, 10 # // Topbar
    lw $t3, 20($t0) # corner2.x
    lw $t4, 24($t0) # corner2.y
    addi $t4, $t4, 10 # // Topbar
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    sw $t4, 0($sp)
    subi $sp, $sp, 4
    jal fn_corners_to_rect
    addi $sp, $sp, 4
    lw $t4, 0($sp) # h
    addi $sp, $sp, 4
    lw $t3, 0($sp) # w
    addi $sp, $sp, 4
    lw $t2, 0($sp) # y
    addi $sp, $sp, 4
    lw $t1, 0($sp) # x
    
    la $t7, editor
    lw $t7, 28($t7)
    sw $t7, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    sw $t4, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_hollow_rect
    
    # return
    add $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra



# Update level selection outlines in edit menu
fn_edit_menu_update_outlines: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    # 4($sp) i 
    # 8($sp) cursor
    # 12($sp) first_null
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    
    # i = 0, cursor = 0
    li $t1, 0
    sw $t1, 4($sp)
    sw $t1, 8($sp)
    
    # first_null = first_null_custom()
    jal fn_first_null_custom
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    sw $t1, 12($sp)
    
    # while (i < first_null)
    LOOP_edit_menu_update_outlines_1:
        lw $t1, 12($sp)
        lw $t2, 4($sp)
        beq $t1, $t2, ENDLOOP_edit_menu_update_outlines_1
    
        # // Erase level outline
        lw $t1, 8($sp)
        addi $t1, $t1, 2
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 20
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_LEVEL_SEL_OUTLINE_ERASE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        # if (i == menu_state.level_idx)
        lw $t1, 4($sp)
        la $t0, menu_state
        lbu $t2, 1($t0)
        bne $t1, $t2, ENDIF_edit_menu_update_outlines_1
        IF_edit_menu_update_outlines_1:
            # // Draw level outline
            lw $t1, 8($sp)
            addi $t1, $t1, 2
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_LEVEL_SEL_OUTLINE
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        
        ENDIF_edit_menu_update_outlines_1:
    
        # cursor += 20
        lw $t1, 8($sp)
        addi $t1, $t1, 20
        sw $t1, 8($sp)
        
        # i++
        lw $t1, 4($sp)
        addi $t1, $t1, 1
        sw $t1, 4($sp)
    
        j LOOP_edit_menu_update_outlines_1
    ENDLOOP_edit_menu_update_outlines_1:
    
    lw $t1, 4($sp)
    la $t0, menu_state
    lbu $t2, 1($t0)
    bne $t1, $t2, ELSE_edit_menu_update_outlines_1
    IF_edit_menu_update_outlines_2: # if (menu_state.level_idx == i)  // + icon is selected
        # // Draw outline
        lw $t1, 8($sp)
        addi $t1, $t1, 2
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 20
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_ADD_ICON_OUTLINE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        j ENDIF_edit_menu_update_outlines_2
    ELSE_edit_menu_update_outlines_1: # else 
        # // Erase outline
        lw $t1, 8($sp)
        addi $t1, $t1, 2
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 20
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_ADD_ICON_OUTLINE_ERASE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
    ENDIF_edit_menu_update_outlines_2:
    
    # return
    addi $sp, $sp, 12 # Pop local vars
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra




# Draw edit menu static content only
fn_draw_edit_menu: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    # 4($sp) i
    # 8($sp) cursor
    # 12($sp) first_null
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    
    # // Draw title BMP
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 2
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    la $t1, BMP_CUSTOM_LEVELS
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # first_null = first_null_custom()
    jal fn_first_null_custom
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    sw $t1, 12($sp)
    
    # i = 0, cursor = 0
    li $t1, 0
    sw $t1, 4($sp)
    sw $t1, 8($sp)
    
    # while (i < first_null)
    LOOP_draw_edit_menu_1:
        lw $t1, 12($sp)
        lw $t2, 4($sp)
        beq $t1, $t2, ENDLOOP_draw_edit_menu_1
        
        # // Draw level box
        lw $t1, 8($sp)
        addi $t1, $t1, 2
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 20
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_LEVEL_SEL_UNLOCKED
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        # // Draw int
        lw $t2, 4($sp)
        addi $t2, $t2, 1
        lw $t1, 8($sp)
        addi $t1, $t1, 7
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 25
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        sw $t2, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_int
        
        # cursor += 20
        lw $t1, 8($sp)
        addi $t1, $t1, 20
        sw $t1, 8($sp)
        
        # i++
        lw $t1, 4($sp)
        addi $t1, $t1, 1
        sw $t1, 4($sp)
    
        j LOOP_draw_edit_menu_1
    ENDLOOP_draw_edit_menu_1:
    
    # // Draw "Add Level" icon
    lw $t1, 8($sp)
    addi $t1, $t1, 2
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 20
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    la $t1, BMP_ADD_ICON
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # return
    addi $sp, $sp, 12 # // Pop local vars
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra



# Use menu_state data to update the level selection screen with dynamic content
# such as button selection outlines
fn_level_select_update_outline: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    # 4($sp) i
    # 8($sp) cursor
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    
    # i = 0, cursor = 0
    li $t1, 0
    sw $t1, 4($sp)
    sw $t1, 8($sp)
    
    # for i in [0, 4]
    LOOP_level_select_update_outline_1:
        lw $t1, 4($sp)
        beq $t1, 5, ENDLOOP_level_select_update_outline_1
    
        # // erase outline around custom and regular level
        lw $t2, 8($sp)
        addi $t2, $t2, 5
        sw $t2, 0($sp)
        subi $sp, $sp, 4
        li $t1, 20
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_LEVEL_SEL_OUTLINE_ERASE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        lw $t2, 8($sp)
        addi $t2, $t2, 5
        sw $t2, 0($sp)
        subi $sp, $sp, 4
        li $t1, 93
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_LEVEL_SEL_OUTLINE_ERASE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
    
        # if (i == menu_state.level_idx)
        la $t0, menu_state
        lbu $t1, 1($t0) # // level_idx
        lw $t2, 4($sp) # // i
        bne $t1, $t2, ENDIF_level_select_update_outline_1
        IF_level_select_update_outline_1:
        
            # if (menu_state.state == 4)  // selecting from regular levels
            lbu $t0, menu_state
            bne $t0, 4, ELSE_level_select_update_outline_1
            IF_level_select_update_outline_2:
                # t7 y_coord = 20
                li $t7, 20
            
                j ENDIF_level_select_update_outline_2
            ELSE_level_select_update_outline_1: # else // (menu_state.state == 5), selecting from custom levels
                # t7 y_coord = 93
                li $t7, 93
            ENDIF_level_select_update_outline_2:
                
            # // Draw outline using y coord and cursor
            lw $t2, 8($sp)
            addi $t2, $t2, 5
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            sw $t7, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_LEVEL_SEL_OUTLINE
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
        ENDIF_level_select_update_outline_1:
            
        # i++, cursor += 25
        lw $t1, 4($sp)
        addi $t1, $t1, 1
        sw $t1, 4($sp)
        lw $t1, 8($sp)
        addi $t1, $t1, 25
        sw $t1, 8($sp)
            
        j LOOP_level_select_update_outline_1
    ENDLOOP_level_select_update_outline_1:
    
    
    # return
    addi $sp, $sp, 8 # // Pop local vars
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra




# Draw level selection screen based on menu_state data. Does not draw any button outlines
# or other dynamic content
fn_draw_level_select: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    # 4($sp) i
    # 8($sp) cursor
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    
    # // Draw "Regular Levels:"
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 2
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    la $t1, BMP_REGULAR_LEVELS
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # // Draw "Custom Levels:"
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 75
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    la $t1, BMP_CUSTOM_LEVELS
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # i = 0, cursor = 0
    li $t1, 0
    sw $t1, 4($sp)
    sw $t1, 8($sp)
    
    # for i in [0,4]:
    LOOP_draw_level_select_1:
        lw $t1, 4($sp) # // i
        beq $t1, 5, ENDLOOP_draw_level_select_1
    
        la $t0, regular_levels
        lw $t1, 4($sp)
        li $t2, 2124 # sizeof(Level)
        mult $t1, $t2 
        mflo $t1 # t1 = i * sizeof(Level)
        add $t0, $t0, $t1 # t0 = &regular_levels[i]
        lbu $t1, 3($t0)
        beq $t1, 1, ELSE_draw_level_select_1
        IF_draw_level_select_1: # if regular_levels[i] != NULL
            
            # if regular_levels[i] is unlocked
            lw $t1, 4($sp) # // i
            la $t0, menu_state
            lbu $t2, 2($t0) # // max unlocked inclusive
            bgt $t1, $t2, ELSE_draw_level_select_2
            IF_draw_level_select_2:
                
                # draw_button_unlocked
                lw $t1, 8($sp)
                addi $t1, $t1, 5  # // 5 to the right of cursor
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                li $t1, 20
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                la $t1, BMP_LEVEL_SEL_UNLOCKED
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_bitmap
        
                # draw_int
                lw $t2, 4($sp)
                addi $t2, $t2, 1 # // level number = i + 1
                lw $t1, 8($sp)
                addi $t1, $t1, 11
                sw $t1, 0($sp) # // 11 to the right of cursor
                subi $sp, $sp, 4
                li $t1, 24
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                sw $t2, 0($sp) 
                subi $sp, $sp, 4
                jal fn_draw_int
            
                j ENDIF_draw_level_select_2
            ELSE_draw_level_select_2: # else
                # draw_button_locked
                lw $t1, 8($sp)
                addi $t1, $t1, 5  # // 5 to the right of cursor
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                li $t1, 20
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                la $t1, BMP_LEVEL_SEL_LOCKED
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_bitmap
            ENDIF_draw_level_select_2:
            
            # cursor += 25
            lw $t1, 8($sp)
            addi $t1, $t1, 25
            sw $t1, 8($sp)
        
            j ENDIF_draw_level_select_1
        ELSE_draw_level_select_1: # else: break
            j ENDLOOP_draw_level_select_1
        ENDIF_draw_level_select_1:
        
        # i++
        lw $t1, 4($sp)
        addi $t1, $t1, 1
        sw $t1, 4($sp)
        
        j LOOP_draw_level_select_1
    ENDLOOP_draw_level_select_1:
           
    # i = 0, cursor = 0
    li $t1, 0
    sw $t1, 4($sp)
    sw $t1, 8($sp)
    
    # for i in [0,4]:
    LOOP_draw_level_select_2:
        lw $t1, 4($sp) # // i
        beq $t1, 5, ENDLOOP_draw_level_select_2
    
        la $t0, custom_levels
        lw $t1, 4($sp)
        li $t2, 2124 # sizeof(Level)
        mult $t1, $t2 
        mflo $t1 # t1 = i * sizeof(Level)
        add $t0, $t0, $t1 # t0 = &custom_levels[i]
        lbu $t1, 3($t0) # t0->is_null
        beq $t1, 1, ELSE_draw_level_select_3
        IF_draw_level_select_3: # if regular_levels[i] != NULL
            
            # draw_button_unlocked
            lw $t1, 8($sp)
            addi $t1, $t1, 5  # // 5 to the right of cursor
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 93
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_LEVEL_SEL_UNLOCKED
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
    
            # draw_int
            lw $t2, 4($sp)
            addi $t2, $t2, 1 # // level number = i + 1
            lw $t1, 8($sp)
            addi $t1, $t1, 11
            sw $t1, 0($sp) # // 11 to the right of cursor
            subi $sp, $sp, 4
            li $t1, 97
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            sw $t2, 0($sp) 
            subi $sp, $sp, 4
            jal fn_draw_int
            
            # cursor += 25
            lw $t1, 8($sp)
            addi $t1, $t1, 25
            sw $t1, 8($sp)
        
            j ENDIF_draw_level_select_3
        ELSE_draw_level_select_3: # else: break
            j ENDLOOP_draw_level_select_2
        ENDIF_draw_level_select_3:
        
        # i++
        lw $t1, 4($sp)
        addi $t1, $t1, 1
        sw $t1, 4($sp)
        
        j LOOP_draw_level_select_2
    ENDLOOP_draw_level_select_2:
    
    # return
    addi $sp, $sp, 8 # // Pop local variables
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra


# Given a pixel number x_shift, check if paddle will collide with a wall
# after the movement. If not, perform the movement. Otherwise, move the paddle
# as far as it can go without colliding. Only checks collision with walls. It
# is assumed that bricks will never be in the way of the paddle
fn_move_paddle: # (int x_shift) -> void
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # 4($sp) x_shift
    # 8($sp) i
    # 12($sp) w
    # 16($sp) ptr
    # 20($sp) is_collide
    # 24($sp) loop_bound
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    
    # loop_bound = abs(x_shift) + 1
    lw $t1, 4($sp)
    bgez $t1, ENDIF_move_paddle_4
    IF_move_paddle_4:
        neg $t1, $t1
    ENDIF_move_paddle_4:
    addi $t1, $t1, 1
    sw $t1, 24($sp)
    
    # i = 1
    li $t1, 1
    sw $t1, 8($sp)
    
    # for i in [1, x_shift - 1, ..., x_shift]
    LOOP_move_paddle_1:
        lw $t1, 8($sp)
        lw $t2, 24($sp)
        beq $t1, $t2, ENDLOOP_move_paddle_1
    
        # is_collide = 0
        li $t1, 0
        sw $t1, 20($sp)
        
        # w = 0
        li $t1, 0
        sw $t1, 12($sp)
        
        # ptr = &(game->walls)
        la $t0, game
        addi $t0, $t0, 1924
        sw $t0, 16($sp)
        
        # for w in walls:
        LOOP_move_paddle_2:
            la $t0, game
            lbu $t1, 1($t0)
            lw $t2, 12($sp)
            beq $t1, $t2, ENDLOOP_move_paddle_2
            
            # if (w != NULL)
            lw $t1, 16($sp)
            lw $t2, 0($t1)
            srl $t3, $t2, 24
            beq $t3, 0xff, ENDIF_move_paddle_3
            IF_move_paddle_3:
            
                # if collide(w, Vec(paddle_pos.x +/- i, paddle_pos.y), Vec(25, 3))
                lw $t3, 16($sp)
                la $t0, game
                lw $t1, 2140($t0)
                
                lw $t2, 8($sp)
                lw $t8, 4($sp)
                bgez $t8, ELSE_move_paddle_2
                IF_move_paddle_6: # if (x_shift < 0)
                    sub $t1, $t1, $t2
                    j ENDIF_move_paddle_6
                ELSE_move_paddle_2: # else (x_shift >= 0)
                    add $t1, $t1, $t2
                ENDIF_move_paddle_6:
                
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 2144($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                li $t1, 25
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                li $t1, 3
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 4($t3)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t3)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t3)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t3)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_rect_collide
                addi $sp, $sp, 4
                lw $t1, 0($sp)
                bne $t1, 1, ENDIF_move_paddle_1
                IF_move_paddle_1:
                    # is_collide = 1
                    li $t1, 1
                    sw $t1, 20($sp)
                ENDIF_move_paddle_1:
            
                # w++
                lw $t1, 12($sp)
                addi $t1, $t1, 1
                sw $t1, 12($sp)
            
            ENDIF_move_paddle_3:
            
            # ptr += sizeof(Rect)
            lw $t1, 16($sp)
            addi $t1, $t1, 20
            sw $t1, 16($sp)
            
            j LOOP_move_paddle_2
        ENDLOOP_move_paddle_2:
                
        # if is_collide
        lw $t1, 20($sp)
        bne $t1, 1, ENDIF_move_paddle_2
        IF_move_paddle_2:            
            # break
            j ENDLOOP_move_paddle_1
        ENDIF_move_paddle_2:
            
        # i++
        lw $t1, 8($sp)
        addi $t1, $t1, 1
        sw $t1, 8($sp)
            
        j LOOP_move_paddle_1
    ENDLOOP_move_paddle_1:
    
    # i -= 1
    lw $t1, 8($sp)
    subi $t1, $t1, 1
    sw $t1, 8($sp)

    # Erase paddle
    la $t0, game
    lw $t1, BG_COLOR
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    lw $t1, 2140($t0)
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    lw $t1, 2144($t0)
    addi $t1, $t1, 10 # // topbar shift
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 25
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # paddle_pos.x += i if x_shift > 0 else -= i
    la $t0, game
    lw $t1, 2140($t0)
    lw $t2, 8($sp)
    lw $t3, 4($sp)
    
    bgez $t3, ELSE_move_paddle_1
    IF_move_paddle_5: # if (x_shift < 0)
        sub $t1, $t1, $t2
        j ENDIF_move_paddle_5
    ELSE_move_paddle_1: # else (x_shift >= 0)
        add $t1, $t1, $t2
    ENDIF_move_paddle_5:
    sw $t1, 2140($t0)
    
    # Draw paddle
    la $t0, game
    li $t1, 0x00ffffff
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    lw $t1, 2140($t0)
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    lw $t1, 2144($t0)
    addi $t1, $t1, 10 # // topbar shift
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 25
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    
    # return
    addi $sp, $sp, 24 # // Pop stack frame
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra




# Draw or erase paused icon based on game->is_paused
fn_game_update_paused: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # if (game->is_paused)
    la $t0, game
    lbu $t1, 2150($t0)
    beq $t1, 0, ELSE_game_update_paused_1
    IF_game_update_paused_1:
        # draw_bitmap(Vec(1, 1), &BMP_PAUSED) // Draw paused icon BMP
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_PAUSED
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        j ENDIF_game_update_paused_1
    ELSE_game_update_paused_1:
        # draw_rect(Rect(BG_COLOR, Vec(1, 1), Vec(10, 10)))
        lw $t1, BG_COLOR
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
    
    ENDIF_game_update_paused_1:
    
    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra


# Use global game variable to read and update the visual score display
fn_game_update_score: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # // Erase score
    lw $t1, BG_COLOR
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 50
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 2
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 12
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 7
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # draw_int(Vec(50, 2), game->score)
    li $t1, 50
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 2
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    la $t0, game
    lw $t1, 2152($t0)
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_int
    
    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra
    

# Draws the level whose first byte is at the address specified by ptr
fn_draw_level: # (int ptr) -> void
    subi $sp, $sp, 4
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    # 4($sp) obj_count
    # 8($sp) i    // Valid object iteration count
    # 12($sp) = link
    # 16($sp) = j   // Total iteration count
    # 20($sp) ptr
    
    # if (! ptr->is_null)
    lw $t0, 20($sp)
    lbu $t1, 3($t0)
    beq $t1, 1, ENDIF_draw_level_1
    IF_draw_level_1:
        
        # i = 0
        li $t0, 0
        sw $t0, 8($sp)
        
        # j = 0
        li $t0, 0
        sw $t0, 16($sp)
        
        # obj_count = ptr->num_bricks
        lw $t0, 20($sp)
        lbu $t1, 2($t0)
        sw $t1, 4($sp)
        
        LOOP_draw_level_1: # while i < obj_count
            lw $t0, 8($sp)
            lw $t1, 4($sp)
            beq $t0, $t1, ENDLOOP_draw_level_1
        
            # t0 = &(ptr->bricks)
            lw $t0, 20($sp)
            addi $t0, $t0, 4
            
            # t0 += j * sizeof(Brick)
            lw $t1, 16($sp) # // i
            li $t2, 24  # // Brick size
            mult $t1, $t2
            mflo $t1
            add $t0, $t0, $t1
            
            # if (t0->life != 0)
            lw $t1, 0($t0)
            beq $t1, 0, ENDIF_draw_level_2
            IF_draw_level_2:
                
                # draw_rect(t0->rect.color, t0->rect.pos, t0->rect.w_h) // Draw brick
                lw $t1, 4($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t0)
                addi $t1, $t1, 10 # // Shift 10 to account for topbar
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 20($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_rect
                
                # i++
                lw $t0, 8($sp)
                addi $t0, $t0, 1
                sw $t0, 8($sp)
                
            ENDIF_draw_level_2:
            
            # j++
            lw $t0, 16($sp)
            addi $t0, $t0, 1
            sw $t0, 16($sp)
        
            j LOOP_draw_level_1
        ENDLOOP_draw_level_1:
        
        # i = 0
        li $t0, 0
        sw $t0, 8($sp)
        
        # j = 0
        li $t0, 0
        sw $t0, 16($sp)
        
        # obj_count = ptr->num_walls
        lw $t0, 20($sp)
        lbu $t1, 1($t0)
        sw $t1, 4($sp)
        
        LOOP_draw_level_2: # while i < obj_count
            lw $t0, 8($sp)
            lw $t1, 4($sp)
            beq $t0, $t1, ENDLOOP_draw_level_2
        
            # t0 = &(ptr->walls)
            lw $t0, 20($sp)
            addi $t0, $t0, 1924
            
            # t0 += j * sizeof(Rect)
            lw $t1, 16($sp) # // i
            li $t2, 20  # // Rect (Wall) size
            mult $t1, $t2
            mflo $t1
            add $t0, $t0, $t1
            
            # if (t0->color < ff000000)
            lw $t1, 0($t0)
            sltu $t1, $t1, 0xff000000
            beq $t1, 0, ENDIF_draw_level_3
            IF_draw_level_3:
                
                # draw_rect(t0->color, t0->pos, t0->w_h) // Draw brick
                lw $t1, 0($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 4($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t0)
                addi $t1, $t1, 10 # // Shift 10 to account for topbar
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_rect
                
                # i++
                lw $t0, 8($sp)
                addi $t0, $t0, 1
                sw $t0, 8($sp)
                
            ENDIF_draw_level_3:
            
            # j++
            lw $t0, 16($sp)
            addi $t0, $t0, 1
            sw $t0, 16($sp)
        
            j LOOP_draw_level_2
        ENDLOOP_draw_level_2:
        
    ENDIF_draw_level_1:
    
    # return
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    jr $ra



# Read menu state and redraw button outlines based on which button is selected
fn_menu_update_outline: # () -> void
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 39
    li $t1, 35
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    li $t0, 39
    li $t1, 55
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    li $t0, 39
    li $t1, 75
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    li $t0, 39
    li $t1, 95
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    
    lbu $t0, menu_state
    beq $t0, 0, IF_fn_menu_update_outline_1 
    beq $t0, 1, ELIF_fn_menu_update_outline_1
    beq $t0, 2, ELIF_fn_menu_update_outline_2
    beq $t0, 3, ELIF_fn_menu_update_outline_3
    j ENDIF_fn_menu_update_outline_1
    IF_fn_menu_update_outline_1: # if (menu_state.state == 0)
        li $t1, 35 # t1 h = 45
        j ENDIF_fn_menu_update_outline_1
    ELIF_fn_menu_update_outline_1: # elif (menu_state.state == 1)
        li $t1, 55 # t1 h = 65
        j ENDIF_fn_menu_update_outline_1
    ELIF_fn_menu_update_outline_2: # elif (menu_state.state == 2)
        li $t1, 75 # t1 h = 85
        j ENDIF_fn_menu_update_outline_1
    ELIF_fn_menu_update_outline_3: # elif (menu_state.state == 3)
        li $t1, 95 # t1 h = 105
    ENDIF_fn_menu_update_outline_1:
    
    # draw_bitmap(Vec(39, h), &BMP_BUTTON_OUTLINE)
    li $t0, 39
    la $t2, BMP_BUTTON_OUTLINE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    
    # return
    jr $ra
    

# Render the menu without any buttons selected
fn_draw_menu: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4

    # draw_bitmap(Vec(0, 5), &BMP_TITLE)
    li $t0, 0
    li $t1, 1
    la $t2, BMP_TITLE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_PLAY)
    li $t0, 39
    li $t1, 35
    la $t2, BMP_BUTTON_PLAY
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 65), &BMP_BUTTON_LEVELS)
    li $t0, 39
    li $t1, 55
    la $t2, BMP_BUTTON_LEVELS
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 85), &BMP_BUTTON_EDIT)
    li $t0, 39
    li $t1, 75
    la $t2, BMP_BUTTON_EDIT
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 105), &BMP_BUTTON_QUIT)
    li $t0, 39
    li $t1, 95
    la $t2, BMP_BUTTON_QUIT
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(26, 118), &BMP_HIGHSCORE)
    li $t0, 26
    li $t1, 118
    la $t2, BMP_HIGHSCORE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_int(Vec(39, 105), menu_state.highscore)
    li $t0, 94
    li $t1, 119
    la $t2, menu_state
    lw $t2, 4($t2)
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_int
    
    # return
    add $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra


# Color entire screen black
fn_clear_screen: # () -> void
    # draw_rect(Rect(BG_COLOR, Vec(0, 0), Vec(128, 128))) // Erase whole screen
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    lw $t0, BG_COLOR
    li $t1, 0
    li $t2, 0
    li $t3, 128
    li $t4, 128
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    sw $t4, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # return
    jr $ra




## UTILITY FUNCTIONS: ########################################

# Convert an (x,y) Vec struct to a a display address
fn_vec2addr: # (Vec) -> int
    # x, y = Vec
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    
    li $t2, 0 # cur_addr = 0
    
    # x_shift = 4 * x
    li $t4, 4
    mult $t0, $t4
    mflo $t4
    
    # cur_addr += x_shift
    add $t2, $t2, $t4
    
    # y_shift = 4 * 128 * y
    lw $t5, SCREEN_WIDTH 
    li $t4, 4
    mult $t5, $t4
    mflo $t4 # // t4 = 4 * 128, bytes to shift a whole display row
    mult $t4, $t1
    mflo $t4
    
    # cur_addr += y_shift
    add $t2, $t2, $t4
    
    # return t0
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jr $ra
    
    
    
    
# Given value, draw base 10 integer (supports multidigit) using addr as topleft
# Precondition: val has <= 9 digits
fn_draw_int: # (Vec top_left, int val) -> void
    # t0 x, t1 y, t2 val = addr, val
    addi $sp, $sp 4
    lw $t2, 0($sp)
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp 4
    lw $t0, 0($sp)
    
    # if (val == 0)
    bne $t2, 0, ENDIF_fn_draw_int_0
    IF_fn_draw_int_0:
        # draw_bitmap(Vec(x,y), &BMP_ZERO)
        sw $ra, 0($sp)
        subi $sp, $sp, 4
        sw $t0, 0($sp)
        subi $sp, $sp, 4
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t9, BMP_ZERO
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        addi $sp, $sp, 4
        lw $ra, 0($sp)
    
        # return
        j ENDLOOP_fn_draw_int_2
    ENDIF_fn_draw_int_0:

    # t4 counter = 0
    li $t4, 0
    
    LOOP_fn_draw_int_1: # while (val != 0)
        beq $t2, 0, ENDLOOP_fn_draw_int_1
        
        # t3 digit = val % 10
        # t2 val = val // 10
        li $t3, 10
        div $t2, $t3
        mflo $t2
        mfhi $t3
        
        # stack.push(digit)
        sw $t3, 0($sp)
        subi $sp, $sp, 4
        
        # counter++
        addi $t4, $t4, 1
        
        j LOOP_fn_draw_int_1
    ENDLOOP_fn_draw_int_1:
    
    LOOP_fn_draw_int_2: # while (counter > 0)
        beq $t4, 0, ENDLOOP_fn_draw_int_2
        
        # t3 digit = stack.pop()
        addi $sp, $sp, 4
        lw $t3, 0($sp)
        
        beq $t3, 0, IF_fn_draw_int_1
        beq $t3, 1, ELIF_fn_draw_int_1
        beq $t3, 2, ELIF_fn_draw_int_2
        beq $t3, 3, ELIF_fn_draw_int_3
        beq $t3, 4, ELIF_fn_draw_int_4
        beq $t3, 5, ELIF_fn_draw_int_5
        beq $t3, 6, ELIF_fn_draw_int_6
        beq $t3, 7, ELIF_fn_draw_int_7
        beq $t3, 8, ELIF_fn_draw_int_8
        beq $t3, 9, ELIF_fn_draw_int_9
        IF_fn_draw_int_1: # if digit == 0
            la $t5, BMP_ZERO # t5 BitMap map = BMP_ZERO
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_1: # elif digit == 1
            la $t5, BMP_ONE # BitMap map = BMP_ONE
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_2: # elif digit == 2
            la $t5, BMP_TWO # BitMap map = BMP_TWO
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_3: # elif digit == 3
            la $t5, BMP_THREE # BitMap map = BMP_THREE
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_4: # elif digit == 4
            la $t5, BMP_FOUR # BitMap map = BMP_FOUR
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_5: # elif digit == 5
            la $t5, BMP_FIVE # BitMap map = BMP_FIVE
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_6: # elif digit == 6
            la $t5, BMP_SIX # BitMap map = BMP_SIX
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_7: # elif digit == 7
            la $t5, BMP_SEVEN # BitMap map = BMP_SEVEN
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_8: # elif digit == 8
            la $t5, BMP_EIGHT # BitMap map = BMP_EIGHT
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_9: # elif digit == 9
            la $t5, BMP_NINE # BitMap map = BMP_NINE
            j ENDIF_fn_draw_int_1
        ENDIF_fn_draw_int_1:
        
        # t6 i, t7 j = 0
        li $t6, 0
        li $t7, 0
        
        # t2 width = map.width
        # t3 height = map.height
        lw $t2, 0($t5)
        lw $t3, 4($t5)
        
        # map = &map.pixels
        addi $t5, $t5, 8
        
        LOOP_fn_draw_int_3: # while (j != height)
            beq $t7, $t3, ENDLOOP_fn_draw_int_3
            
            # i = 0
            li $t6, 0
        
            LOOP_fn_draw_int_4: # while (i != height)
                beq $t6, $t2, ENDLOOP_fn_draw_int_4
                
                # if (*map != 0xff******)
                lw $t8, 0($t5)
                srl $t8, $t8, 24
                beq $t8, 0xff, ENDIF_fn_draw_int_2
                IF_fin_draw_int_2:
                    # t8 cur_x = x + i
                    # t9 cur_y = y + j
                    add $t8, $t0, $t6
                    add $t9, $t1, $t7
                    
                    # stack.push(t0 x, t1, y, t2 width, t3 height, t4 counter, t5 map, t6 i, t7 j)
                    sw $t0, 0($sp)
                    subi $sp, $sp, 4
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    sw $t2, 0($sp)
                    subi $sp, $sp, 4
                    sw $t3, 0($sp)
                    subi $sp, $sp, 4
                    sw $t4, 0($sp)
                    subi $sp, $sp, 4
                    sw $t5, 0($sp)
                    subi $sp, $sp, 4
                    sw $t6, 0($sp)
                    subi $sp, $sp, 4
                    sw $t7, 0($sp)
                    subi $sp, $sp, 4
                    
                    # t8 addr = vec2addr(Vec(cur_x, cur_y))
                    sw $ra, 0($sp)
                    subi $sp, $sp, 4
                    sw $t8, 0($sp)
                    subi $sp, $sp, 4
                    sw $t9, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_vec2addr
                    addi $sp, $sp, 4
                    lw $t8, 0($sp)
                    addi $sp, $sp, 4
                    lw $ra, 0($sp)
                    
                    # repeat(7, stack.pop())
                    addi $sp, $sp, 4
                    lw $t7, 0($sp)
                    addi $sp, $sp, 4
                    lw $t6, 0($sp)
                    addi $sp, $sp, 4
                    lw $t5, 0($sp)
                    addi $sp, $sp, 4
                    lw $t4, 0($sp)
                    addi $sp, $sp, 4
                    lw $t3, 0($sp)
                    addi $sp, $sp, 4
                    lw $t2, 0($sp)
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    addi $sp, $sp, 4
                    lw $t0, 0($sp)
                    
                    # display[addr] = *map
                    lw $t9, ADDR_DSPL
                    add $t9, $t9, $t8
                    lw $t8, 0($t5)
                    sw $t8, 0($t9)
                ENDIF_fn_draw_int_2:
                
                # map++
                addi $t5, $t5, 4
                
                # i++
                addi $t6, $t6, 1
                j LOOP_fn_draw_int_4
            ENDLOOP_fn_draw_int_4:
            
            # j++
            addi $t7, $t7, 1
            j LOOP_fn_draw_int_3
        ENDLOOP_fn_draw_int_3:
        
        # x += width + 2
        add $t0, $t0, $t2
        addi $t0, $t0, 2
        
        # counter--
        subi $t4, $t4, 1
        
        j LOOP_fn_draw_int_2
    ENDLOOP_fn_draw_int_2:
    
    # return
    jr $ra
    
    

# Draws hollow rectangle
fn_draw_hollow_rect: # (Rect rect) -> void
    # 8($sp) h
    # 12($sp) w
    # 16($sp) y
    # 20($sp) x
    # 24($sp) color
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # // Top line
    lw $t0, 20($sp) # x
    lw $t1, 16($sp) # y
    lw $t2, 12($sp) # w
    lw $t7, 24($sp) # color
    sw $t7, 0($sp)
    subi $sp, $sp, 4
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # // Left Line
    lw $t0, 20($sp) # x
    lw $t1, 16($sp) # y
    lw $t2, 8($sp) # h
    lw $t7, 24($sp) # color
    sw $t7, 0($sp)
    subi $sp, $sp, 4
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # // Bottom line
    lw $t0, 20($sp) # x
    lw $t1, 16($sp) # y
    lw $t2, 12($sp) # w
    lw $t3, 8($sp) # h
    add $t1, $t1, $t3 # y + h
    lw $t7, 24($sp) # color
    sw $t7, 0($sp)
    subi $sp, $sp, 4
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # // Right Line
    lw $t0, 20($sp) # x
    lw $t1, 16($sp) # y
    lw $t2, 8($sp) # h
    lw $t3, 12($sp) # w
    add $t0, $t0, $t3 # x + w
    lw $t7, 24($sp) # color
    sw $t7, 0($sp)
    subi $sp, $sp, 4
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 1
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    
    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    addi $sp, $sp, 20  # Pop rect params
    jr $ra
    
    
    
# Fill a rectangular region of the screen with a color
fn_draw_rect: # (Rect rect) -> void
    # t0 x, t1 y = rect.pos
    # t2 w, t3 h = rect.w_h
    # t6 col = rect.color
    addi $sp, $sp, 4
    lw $t3, 0($sp)
    addi $sp, $sp, 4
    lw $t2, 0($sp)
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    addi $sp, $sp, 4
    lw $t6 0($sp)
    
    # t4 i, t5 j = 0
    li $t4, 0
    li $t5, 0
    
    LOOP_fn_erase_1: # while (j < h)
        beq $t5, $t3, ENDLOOP_fn_erase_1 
    
        # i = 0
        li $t4, 0
        
        LOOP_fn_erase_2: # while (i < w)
            beq $t4, $t2, ENDLOOP_fn_erase_2
        
            # t8 cur_x = x + i
            # t9 cur_y = y + j
            add $t8, $t0, $t4
            add $t9, $t1, $t5
            
            # stack.push(t0 x, t1, y, t2 w, t3 h, t4 i, t5 j, t6 col)
            sw $t0, 0($sp)
            subi $sp, $sp, 4
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            sw $t3, 0($sp)
            subi $sp, $sp, 4
            sw $t4, 0($sp)
            subi $sp, $sp, 4
            sw $t5, 0($sp)
            subi $sp, $sp, 4
            sw $t6, 0($sp)
            subi $sp, $sp, 4
            
            # t8 addr = vec2addr(Vec(cur_x, cur_y))
            sw $ra, 0($sp)
            subi $sp, $sp, 4
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            sw $t9, 0($sp)
            subi $sp, $sp, 4
            jal fn_vec2addr
            addi $sp, $sp, 4
            lw $t8, 0($sp)
            addi $sp, $sp, 4
            lw $ra, 0($sp)
            
            # repeat(7, stack.pop())
            addi $sp, $sp, 4
            lw $t6, 0($sp)
            addi $sp, $sp, 4
            lw $t5, 0($sp)
            addi $sp, $sp, 4
            lw $t4, 0($sp)
            addi $sp, $sp, 4
            lw $t3, 0($sp)
            addi $sp, $sp, 4
            lw $t2, 0($sp)
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            addi $sp, $sp, 4
            lw $t0, 0($sp)
        
            # if (! addr out of bounds): display[addr] = *map
            lw $t9, ADDR_DSPL
            add $t9, $t9, $t8
            bgt $t8, 65532, ENDIF_fn_erase_1
            IF_fn_erase_1:
                sw $t6, 0($t9)
            ENDIF_fn_erase_1:
        
            # i++
            addi $t4, $t4, 1
            j LOOP_fn_erase_2
        ENDLOOP_fn_erase_2:
        
        # j++
        addi $t5, $t5, 1
        j LOOP_fn_erase_1
    ENDLOOP_fn_erase_1:
    
    # return
    jr $ra
    
    
# Draw bitmap at given address using addr as topleft of display
fn_draw_bitmap: # (Vec top_left, int bitmap_addr) -> void
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    # 4($sp) i
    # 8($sp) j
    # 12($sp) w
    # 16($sp) h
    # 20($sp) bmp_addr
    # 24($sp) y
    # 28($sp) x
    
    # i, j = 0
    li $t0, 0
    sw $t0, 4($sp)
    sw $t0, 8($sp)
    
    # w, h = bmp_addr->width, bmp_addr->height
    lw $t0, 20($sp)
    lw $t1, 0($t0)
    lw $t2, 4($t0)
    sw $t1, 12($sp)
    sw $t2, 16($sp)
    
    # bitmap_addr += 8
    lw $t0, 20($sp)
    addi $t0, $t0, 8
    sw $t0, 20($sp)
    
    LOOP_fn_draw_bitmap_1: # while (j < h)
        lw $t0, 8($sp)
        lw $t1, 16($sp) 
        beq $t0, $t1, ENDLOOP_fn_draw_bitmap_1
    
        # i = 0
        li $t0, 0
        sw $t0, 4($sp)
    
        LOOP_fn_draw_bitmap_2: # while (i < w)
            lw $t0, 4($sp)
            lw $t1, 12($sp) 
            beq $t0, $t1, ENDLOOP_fn_draw_bitmap_2
            
            # if (*bitmap_addr != 0xff******)
            lw $t0, 20($sp)
            lw $t1, 0($t0)
            srl $t1, $t1, 24
            beq $t1, 0xff, ENDIF_fn_draw_bitmap_1
            IF_fn_draw_bitmap_1:
            
                # t8 cur_x, t9 cur_y = x + i, y + j
                lw $t0, 28($sp)
                lw $t1, 24($sp)
                lw $t2, 4($sp)
                lw $t3, 8($sp)
                add $t8, $t0, $t2
                add $t9, $t1, $t3
                
                # t0 addr = vec2addr(Vec(cur_x, cur_y))
                sw $ra, 0($sp)
                subi $sp, $sp, 4
                sw $t8, 0($sp)
                subi $sp, $sp, 4
                sw $t9, 0($sp)
                subi $sp, $sp, 4
                jal fn_vec2addr
                addi $sp, $sp, 4
                lw $t0, 0($sp)
                addi $sp, $sp, 4
                lw $ra, 0($sp)
            
                # if (0 <= addr <= 65532)
                sle $t6, $t0, 65532
                sge $t5, $t0, 0
                and $t5, $t5, $t6
                bne $t5, 1, ENDIF_fn_draw_bitmap_2
                IF_fn_draw_bitmap_2:
                    # display[addr] = *bitmap_addr
                    lw $t1, ADDR_DSPL
                    add $t1, $t1, $t0
                    lw $t2, 20($sp)
                    lw $t3, 0($t2)
                    sw $t3, 0($t1)
                ENDIF_fn_draw_bitmap_2:
                
            ENDIF_fn_draw_bitmap_1:
            
            # bitmap_addr += 4
            lw $t0, 20($sp)
            addi $t0, $t0, 4
            sw $t0, 20($sp)
        
            # i++
            lw $t0, 4($sp)
            addi $t0, $t0, 1
            sw $t0, 4($sp)
        
            j LOOP_fn_draw_bitmap_2
        ENDLOOP_fn_draw_bitmap_2:
        
        # j++
        lw $t0, 8($sp)
        addi $t0, $t0, 1
        sw $t0, 8($sp)
    
        j LOOP_fn_draw_bitmap_1
    ENDLOOP_fn_draw_bitmap_1:
    
    # // pop entire stack frame
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    
    # return
    jr $ra
    
    
# Return 1 if rects collide, else 0
fn_rect_collide: # (Vec r1_tl, Vec r1_wh, Vec r2_tl, Vec r2_wh) -> int
    # t0 = r1.x
    # t1 = r1.w
    # t2 = r1.y
    # t3 = r1.h
    # t4 = r2.x
    # t5 = r2.w
    # t6 = r2.y 
    # t7 = r2.h
    addi $sp, $sp, 4
    lw $t7, 0($sp)
    addi $sp, $sp, 4
    lw $t5, 0($sp)
    addi $sp, $sp, 4
    lw $t6, 0($sp)
    addi $sp, $sp, 4
    lw $t4, 0($sp)
    addi $sp, $sp, 4
    lw $t3, 0($sp)
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t2, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    
    # t1 = r1.x + r1.w
    add $t1, $t0, $t1
    # t3 = r1.y + r1.h
    add $t3, $t2, $t3
    # t5 = r2.x + r2.w
    add $t5, $t4, $t5
    # t7 = r2.y + r2.h
    add $t7, $t6, $t7
    
    # s7 = ( (t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)) && (t6 < t2 <= t7 || t6 < t3 < t7) || (t3 == t7 && t2 == t6))
    slt $t8, $t1, $t5 # // t8 = t1 < t5 
    slt $t9, $t4, $t1 # // t9 = t4 < t1
    and $t8, $t8, $t9 # // t8 = t4 < t1 < t5
    slt $t9, $t0, $t5 # // t9 = t0 < t5
    slt $s0, $t4, $t0 # // s0 = t4 < t0
    and $t9, $t9, $s0 # // t9 = t4 < t0 < t5
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5
    
    seq $t9, $t1, $t5 # // t9 = t1 == t5
    seq $s0, $t0, $t4 # // s0 = t0 == t4
    and $t9, $t9, $s0 # // t9 = t1 == t5 && t0 == t4
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)
    
    slt $t9, $t6, $t2 # // t9 = t6 < t2
    slt $s0, $t2, $t7 # // s0 = t2 < t7
    and $t9, $t9, $s0 # // t9 = t6 < t2 < t7
    slt $s0, $t6, $t3 # // s0 = t6 < t3
    slt $s1, $t3, $t7 # // s1 = t3 < t7
    and $s0, $s0,$s1 # // s0 = t6 < t3 < t7
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7
    
    seq $s0, $t3, $t7 # // s0 = t3 == t7
    seq $s1, $t2, $t6 # // s1 = t2 == t6
    and $s0, $s0, $s1 # // s0 = t3 == t7 && t2 == t6
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7 || (t3 == t7 && t2 == t6)
    
    and $s7, $t8, $t9 # // s7 = (t4 <= t1 <= t5 || t4 <= t0 <= t5) && (t6 <= t2 <= t7 || t6 <= t3 <= t7)
    
    # // Swap rectangles. We need to check both ways, otherwise case where r2 inside r1 returns false
    # t0 <=> t4
    addi $t8, $t0, 0
    addi $t0, $t4, 0
    addi $t4, $t8, 0
    # t1 <=> t5
    addi $t8, $t1, 0
    addi $t1, $t5, 0
    addi $t5, $t8, 0
    # t2 <=> t6
    addi $t8, $t2, 0
    addi $t2, $t6, 0
    addi $t6, $t8, 0
    # t3 <=> t7
    addi $t8, $t3, 0
    addi $t3, $t7, 0
    addi $t7, $t8, 0
    
    # s6 = ( (t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)) && (t6 < t2 <= t7 || t6 < t3 < t7) || (t3 == t7 && t2 == t6))
    slt $t8, $t1, $t5 # // t8 = t1 < t5 
    slt $t9, $t4, $t1 # // t9 = t4 < t1
    and $t8, $t8, $t9 # // t8 = t4 < t1 < t5
    slt $t9, $t0, $t5 # // t9 = t0 < t5
    slt $s0, $t4, $t0 # // s0 = t4 < t0
    and $t9, $t9, $s0 # // t9 = t4 < t0 < t5
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5
    
    seq $t9, $t1, $t5 # // t9 = t1 == t5
    seq $s0, $t0, $t4 # // s0 = t0 == t4
    and $t9, $t9, $s0 # // t9 = t1 == t5 && t0 == t4
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)
    
    slt $t9, $t6, $t2 # // t9 = t6 < t2
    slt $s0, $t2, $t7 # // s0 = t2 < t7
    and $t9, $t9, $s0 # // t9 = t6 < t2 < t7
    slt $s0, $t6, $t3 # // s0 = t6 < t3
    slt $s1, $t3, $t7 # // s1 = t3 < t7
    and $s0, $s0,$s1 # // s0 = t6 < t3 < t7
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7
    
    seq $s0, $t3, $t7 # // s0 = t3 == t7
    seq $s1, $t2, $t6 # // s1 = t2 == t6
    and $s0, $s0, $s1 # // s0 = t3 == t7 && t2 == t6
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7 || (t3 == t7 && t2 == t6)
    
    and $s6, $t8, $t9 # // s6 = (t4 <= t1 <= t5 || t4 <= t0 <= t5) && (t6 <= t2 <= t7 || t6 <= t3 <= t7)
    
    # if (collide either way)
    or $t8, $s6, $s7
    beq $t8, 0, ELSE_rect_collide_1
    IF_rect_collide_1:
        # return 1
        li $t9, 1
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        jr $ra
        
        j ENDIF_rect_collide_1
    ELSE_rect_collide_1:
        # return 0
        li $t9, 0
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        jr $ra
    ENDIF_rect_collide_1:
    
    
    
# Given a float value shifted left by shift, round the value
# up or down based on the shift
# e.g 1.899 with a shift of 10 becomes 1945
# so round(1945, 10) = 2
fn_round: # (int value, int shift) -> int
    # t0 value
    # t1 shift
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    
    # t2 lower_bound_unshifted = floor(value)  (unshifted)
    srav $t2, $t0, $t1
    # t3 lower_bound_shifted = floor(value)   (shifted)
    sllv $t3, $t2, $t1
    
    # if (value == lower_bound_shifted)
    bne $t3, $t0, ENDIF_fn_round_1
    IF_fn_round_1:
        # return lower_bound_unshifted
        sw $t2, 0($sp)
        subi $sp, $sp, 4
        jr $ra
    ENDIF_fn_round_1:
    
    # t4 upper_bound_unshifted = floor(value)  (unshifted)
    addi $t4, $t2, 1
    # t5 upper_bound_shifted = floor(value)  (shifted)
    sllv $t5, $t4, $t1
    
    # t6 diff_upper = abs(value - upper_bound_shifted)
    sub $t6, $t0, $t5
    bgtz $t6, ENDIF_fn_round_2
    IF_fn_round_2:
        neg $t6, $t6
    ENDIF_fn_round_2:
    
    # t7 diff_lower = abs(value - lower_bound_shifted)
    sub $t7, $t0, $t3
    bgtz $t7, ENDIF_fn_round_3
    IF_fn_round_3:
        neg $t7, $t7
    ENDIF_fn_round_3:
    
    ble $t6, $t7, ElSE_fn_round_1
    IF_fn_round_4: # if (diff_upper > diff_lower)
        # return lower_bound_unshifted
        sw $t2, 0($sp)
        subi $sp, $sp, 4
        jr $ra
    
        j ENDIF_fn_round_4
    ElSE_fn_round_1: # else // diff_upper <= diff_lower
        # return upper_bound_unshifted
        sw $t4, 0($sp)
        subi $sp, $sp, 4
        jr $ra
        
    ENDIF_fn_round_4:



# loop through custom_levels and return the index of the first NULL level. 5 if none are null
fn_first_null_custom: # () -> int
    # t0 i = 0
    li $t0, 0
    
    # while (i < 5)
    LOOP_first_null_custom:
        beq $t0, 5, ENDLOOP_first_null_custom
    
        la $t1, custom_levels
        li $t2, 2124 # // t2 = i * sizeof(level)
        mult $t0, $t2
        mflo $t2
        add $t1, $t1, $t2
        lbu $t3, 3($t1) # // is_null
        
        # if is_null: break
        beq $t3, 1, ENDLOOP_first_null_custom
    
        # i++
        addi $t0, $t0, 1
    
        j LOOP_first_null_custom
    ENDLOOP_first_null_custom:
   
    # return
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    jr $ra



# Loop through the level and check if the provided rect collides with any walls or bricks
# also check collision with default starting ball and paddle location
# The second returned int has the following values:
# 1 = collided with brick
# 2 = collided with wall
# 3 = collided with paddle or ball
# 4 = no collision
# If 1 or 2, then the first return value is a pointer to the object that was collided with
# If 3 or 4, the value of the returned pointer is irrelevant and can be garbage
fn_collide_level: # (Level *level_ptr, Vec top_left, Vec, w_h) -> void *, int
    addi $sp, $sp, 4
    lw $t4, 0($sp) # w_h.y
    addi $sp, $sp, 4
    lw $t3, 0($sp) # w_h.x
    addi $sp, $sp, 4
    lw $t2, 0($sp) # top_left.y
    addi $sp, $sp, 4
    lw $t1, 0($sp) # top_left.x
    addi $sp, $sp, 4
    lw $t0, 0($sp) # level_ptr
    
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # 4($sp) level_ptr
    # 8($sp) top_left.x
    # 12($sp) top_left.y
    # 16($sp) w_h.x
    # 20($sp) w_h.y
    # 24($sp) ptr // For looping bricks and walls
    # 28($sp) i // obj count loop var
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    sw $t4, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    
    # i = 0, ptr = &level_ptr->bricks
    li $t1, 0
    sw $t1, 28($sp)
    lw $t0, 4($sp)
    addi $t0, $t0, 4
    sw $t0, 24($sp)
    
    # for brick in bricks
    LOOP_collide_level_1:
        lw $t0, 4($sp) # level_ptr
        lbu $t1, 2($t0) # num_bricks
        lw $t2, 28($sp) # i
        beq $t1, $t2, ENDLOOP_collide_level_1
    
        # if (brick != NULL)
        lw $t0, 24($sp) # ptr
        lw $t1, 0($t0)
        beq $t1, 0, ENDIF_collide_level_1
        IF_collide_level_1:
            
            lw $t0, 8($sp)
            lw $t1, 12($sp)
            lw $t2, 16($sp)
            lw $t3, 20($sp)
            lw $t4, 24($sp) # ptr
            
            sw $t0, 0($sp)
            subi $sp, $sp, 4
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            sw $t3, 0($sp)
            subi $sp, $sp, 4
            
            lw $t1, 8($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 12($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 16($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 20($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t0, 0($sp) # t0 = if brick collided with rect
            
            bne $t0, 1, ENDIF_collide_level_3
            IF_collide_level_3:
                # return
                lw $t3, 24($sp)
                
                addi $sp, $sp, 28 # // Pop local vars
                addi $sp, $sp, 4
                lw $ra, 0($sp)
                
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                li $t1, 1
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jr $ra
            ENDIF_collide_level_3:
            
            # i++
            lw $t1, 28($sp)
            addi $t1, $t1, 1
            sw $t1, 28($sp)
            
        ENDIF_collide_level_1:
        
        # ptr += sizeof(Brick) // 24
        lw $t1, 24($sp)
        addi $t1, $t1, 24
        sw $t1, 24($sp)
    
        j LOOP_collide_level_1
    ENDLOOP_collide_level_1:
    
    # i = 0, ptr = &level_ptr->walls
    li $t1, 0
    sw $t1, 28($sp)
    lw $t0, 4($sp)
    addi $t0, $t0, 1924
    sw $t0, 24($sp)
    
    # for wall in walls
    LOOP_collide_level_2:
        lw $t0, 4($sp) # level_ptr
        lbu $t1, 1($t0) # num_walls
        lw $t2, 28($sp) # i
        beq $t1, $t2, ENDLOOP_collide_level_2
    
        # if (wall != NULL)
        lw $t0, 24($sp) # ptr
        lw $t1, 0($t0)
        srl $t1, $t1, 24
        beq $t1, 0xff, ENDIF_collide_level_2
        IF_collide_level_2:
            
            lw $t0, 8($sp)
            lw $t1, 12($sp)
            lw $t2, 16($sp)
            lw $t3, 20($sp)
            lw $t4, 24($sp) # ptr
            
            sw $t0, 0($sp)
            subi $sp, $sp, 4
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            sw $t3, 0($sp)
            subi $sp, $sp, 4
            
            lw $t1, 4($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 8($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 12($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 16($t4)
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t0, 0($sp) # t0 = if wall collided with rect
            
            bne $t0, 1, ENDIF_collide_level_4
            IF_collide_level_4:
                # return
                lw $t3, 24($sp)
                
                addi $sp, $sp, 28 # // Pop local vars
                addi $sp, $sp, 4
                lw $ra, 0($sp)
                
                sw $t3, 0($sp)
                subi $sp, $sp, 4
                li $t1, 2
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jr $ra
            ENDIF_collide_level_4:
            
            # i++
            lw $t1, 28($sp)
            addi $t1, $t1, 1
            sw $t1, 28($sp)
            
        ENDIF_collide_level_2:
    
        # ptr += sizeof(Rect) // 20
        lw $t1, 24($sp)
        addi $t1, $t1, 20
        sw $t1, 24($sp)
    
        j LOOP_collide_level_2
    ENDLOOP_collide_level_2:
    
    
    
    
    lw $t0, 8($sp)
    lw $t1, 12($sp)
    lw $t2, 16($sp)
    lw $t3, 20($sp)
    
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    
    li $t1, 50
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 110
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 25
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_rect_collide
    addi $sp, $sp, 4
    lw $t0, 0($sp) 
    sw $t0, 28($sp) # i = did paddle collide
    
    
    
    lw $t0, 8($sp)
    lw $t1, 12($sp)
    lw $t2, 16($sp)
    lw $t3, 20($sp)
    
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    
    li $t1, 60
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 102
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 3
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_rect_collide
    addi $sp, $sp, 4
    lw $t0, 0($sp) # t0 = did ball collide
    
    lw $t1, 28($sp) # t1 = did paddle collide
    
    or $t0, $t0, $t1 # if (ball collide or paddle collide)
    bne $t0, 1, ENDIF_collide_level_5
    IF_collide_level_5:
        # return (0, 3)    
        addi $sp, $sp, 28 # // Pop local vars
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        li $t1, 0
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jr $ra
    
    ENDIF_collide_level_5:
    
    # return (0, 4)    
    addi $sp, $sp, 28 # // Pop local vars
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    
    li $t1, 0
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jr $ra


# Given two points, compute the top left and width height of the corresponding rect
fn_corners_to_rect: # (Vec corner1, Vec corner2) -> Vec t_l, Vec w_h
    addi $sp, $sp, 4
    lw $t3, 0($sp) # t3 = corner2.y
    addi $sp, $sp, 4
    lw $t2, 0($sp) # t2 = corner2.x
    addi $sp, $sp, 4
    lw $t1, 0($sp) # t1 = corner1.y
    addi $sp, $sp, 4
    lw $t0, 0($sp) # t0 = corner1.x
    
    # t4 = min x, t5 = max x
    bge $t0, $t2, ELSE_corners_to_rect_1
    IF_corners_to_rect_1: # if (t0 < t2)
        # t4 = t0, t5 = t2
        addi $t4, $t0, 0
        addi $t5, $t2, 0
    
        j ENDIF_corners_to_rect_1
    ELSE_corners_to_rect_1: # else: // t0 >= t2
        # t4 = t2, t5 = t0
        addi $t4, $t2, 0
        addi $t5, $t0, 0
        
    ENDIF_corners_to_rect_1:
    
    # t6 = min y, t7 = max y
    bge $t1, $t3, ELSE_corners_to_rect_2
    IF_corners_to_rect_2: # if (t1 < t3)
        # t6 = t1, t7 = t3
        addi $t6, $t1, 0
        addi $t7, $t3, 0
    
        j ENDIF_corners_to_rect_2
    ELSE_corners_to_rect_2: # else: // t1 >= t3
        # t6 = t3, t7 = t1
        addi $t6, $t3, 0
        addi $t7, $t1, 0
        
    ENDIF_corners_to_rect_2:
    
    # t4 = min x, t5 = max x
    # t6 = min y, t7 = max y
    
    sub $t5, $t5, $t4 # t5 = max x - min x = w
    sub $t7, $t7, $t6 # t6 = max y - min y = h
    
    # return
    sw $t4, 0($sp)
    subi $sp, $sp, 4
    sw $t6, 0($sp)
    subi $sp, $sp, 4
    sw $t5, 0($sp)
    subi $sp, $sp, 4
    sw $t7, 0($sp)
    subi $sp, $sp, 4
    
    jr $ra

END_PROG: 

# Saves custom levels to file
# Open file, overwrite all data
li $v0, 13
la $a0, SAVE_FILE
li $a1, 1
syscall
beq $v0, -1, ENDIF_end_1
IF_end_1: # if (fd != -1)
   addi $a0, $v0, 0
   li $v0, 15
   la $a1, custom_levels
   li $a2, 10620
   syscall
ENDIF_end_1:


# TODO: Finish fast cursor mode

# TODO: Add custom level file saving and loading and start and end

# TODO: Vertical velocity as part of level config (padding?)

# TODO: Bug: Paddle can "catch" the ball if it is moved into the balls position at the precise right moment.
# to fix this, make sure the paddle move function includes ball collision. This way, the paddle won't be able to move into the ball

# TODO: Tune the paddle bounce angle (1/2 of normal fraction to remove from height, 1/4 of normal fraction added to height) 
# Maybe tweak the /20 part to be slightly lower for greater horizontal gain

# TODO:     1. Use “padding” byte in game to write paddle velocity 1 if moved previously, or 0 if not
    # 2. Use paddle velocity to influence ball horizontal velocity on bounce
    
# TODO: Make all drawing functions safe. Currently, draw_bitmap and draw_int will overwrite .data
# section memory if told to draw something out of bounds. These functions can be modified such that they
# check the max address and don't write pixels into out of bounds addresses. draw_rect has been safety-fied already

# TODO: After making all draw functions safe, add out of bounds ball detection for other sides. In a custom level, the
# top and side walls may not exist!
