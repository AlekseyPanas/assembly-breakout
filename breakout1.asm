################ CSC258H1F Fall 2022 Assembly Final Project ##################
# This file contains your implementation of Breakout.
#
# Student 1: Aleksey Panas, 1007766268
######################## Bitmap Display Configuration ########################
# - Unit width in pixels:       2
# - Unit height in pixels:      2
# - Display width in pixels:    256
# - Display height in pixels:   256
# - Base Address for Display:   0x10000000
##############################################################################

# struct Vec
#    int x
#    int y
#
# struct Bitmap
#    int width
#    int height
#    int pixels[width * height]
#
# struct Rect
#    int color
#    Vec pos
#    Vec w_h
#
# struct Brick
#    int life
#    Rect rect
#
# struct Level
#    byte is_null
#    byte num_bricks
#    byte num_walls
#    byte padding
#    Brick bricks[80]
#    Rect walls[10]
#
# struct MenuState
#    byte state
#    byte level_idx
#    byte max_unlocked
#    byte padding
#    int highscore
#
# struct Game
#    Level level
#    Vec ball_pos
#    Vec ball_vel
#    Vec paddle_pos
#    byte mode_mask
#    byte level_idx
#    byte is_paused
#    byte padding
#    int score
#    int lives
#    
#
# struct Editor
#    byte level_idx
#    byte rgb_sel
#    byte error_timer
#    byte padding
#    Vec cursor_pos
#    Vec corner1
#    Vec corner2
#    int color


.data
# Immutable Data 
########################
ADDR_DSPL: .word 0x10000000 # The address of the bitmap display. Don't forget to connect it!
ADDR_KBRD: .word 0xffff0000 # The address of the keyboard. Don't forget to connect it!

SCREEN_WIDTH: .word 128 # Screen dims in pixels
SCREEN_HEIGHT: .word 128

BG_COLOR: .word 0x00000000

NEWLINE: .asciiz "\n"
SPACE: .asciiz " "

# Bitmaps 
########################
BMP_ZERO: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_ONE: .word 0x00000004, 0x00000007, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
BMP_TWO: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_THREE: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_FOUR: .word 0x00000004, 0x00000007, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
BMP_FIVE: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_SIX: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_SEVEN: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000
BMP_EIGHT: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
BMP_NINE: .word 0x00000004, 0x00000007, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff

BMP_TITLE: 
    .word 0x00000080, 0x0000001e, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
    .word 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff
    .word 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff
    .word 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_BUTTON_OUTLINE: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000
BMP_BUTTON_OUTLINE_ERASE: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0xff000000, 0xff000000, 0xff000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000000, 0xff000000
BMP_BUTTON_PLAY: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_BUTTON_LEVELS: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_BUTTON_QUIT: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_BUTTON_EDIT: .word 0x00000032, 0x00000014, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000

BMP_SCORE: .word 0x0000001e, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_LVL: .word 0x00000014, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_PAUSED: .word 0x0000000a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_HEART_EMPTY: .word 0x0000000a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000
BMP_HEART: .word 0x0000000a, 0x0000000a, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x00ffffff, 0x00ffffff, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000


# Mutable Data 
########################
# regular_levels: .space 19005  # struct Level[5]
regular_levels: 
    .word 0x00140300,0x00000001,0x00ff00fa,0x0000000a,0x0000000a,0x0000001b,0x0000000a,0x00000001,0x00ff0000,0x00000025,0x0000000a,0x0000001b,0x0000000a
    .word 0x00000001,0x000000ff,0x00000040,0x0000000a,0x0000001b,0x0000000a,0x00000001,0x0000beff,0x0000005b,0x0000000a,0x0000001b,0x0000000a,0x00000001
    .word 0x0000ff00,0x0000000a,0x00000014,0x0000001b,0x0000000a,0x00000001,0x000000ff,0x00000025,0x00000014,0x0000001b,0x0000000a,0x00000001,0x000000ff
    .word 0x00000040,0x00000014,0x0000001b,0x0000000a,0x00000001,0x00ff6400,0x0000005b,0x00000014,0x0000001b,0x0000000a,0x00000001,0x00ff00fa,0x0000000a
    .word 0x0000001e,0x0000001b,0x0000000a,0x00000001,0x00ff6400,0x00000025,0x0000001e,0x0000001b,0x0000000a,0x00000001,0x000000ff,0x00000040,0x0000001e
    .word 0x0000001b,0x0000000a,0x00000001,0x000000ff,0x0000005b,0x0000001e,0x0000001b,0x0000000a,0x00000001,0x00ff6400,0x0000000a,0x00000028,0x0000001b
    .word 0x0000000a,0x00000001,0x007300ff,0x00000025,0x00000028,0x0000001b,0x0000000a,0x00000001,0x0000ff00,0x00000040,0x00000028,0x0000001b,0x0000000a
    .word 0x00000001,0x007300ff,0x0000005b,0x00000028,0x0000001b,0x0000000a,0x00000001,0x0000ff00,0x0000000a,0x00000032,0x0000001b,0x0000000a,0x00000001
    .word 0x00ff00fa,0x00000025,0x00000032,0x0000001b,0x0000000a,0x00000001,0x0000ff00,0x00000040,0x00000032,0x0000001b,0x0000000a,0x00000001,0x007300ff
    .word 0x0000005b,0x00000032,0x0000001b,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    .word 0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000
    .word 0x0000006c,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    
    .word 0x00140300,0x00000002,0x00ff00fa,0x0000000a,0x0000000a,0x0000001b,0x0000000a,0x00000002,0x00ff00fa,0x00000025,0x0000000a,0x0000001b,0x0000000a,0x00000002,0x00ff6400,0x00000040,0x0000000a,0x0000001b,0x0000000a,0x00000002,0x00ffe600,0x0000005b,0x0000000a,0x0000001b,0x0000000a,0x00000002,0x007300ff,0x0000000a,0x00000014,0x0000001b,0x0000000a,0x00000002,0x0000beff,0x00000025,0x00000014,0x0000001b,0x0000000a,0x00000002,0x007300ff,0x00000040,0x00000014,0x0000001b,0x0000000a,0x00000002,0x00ff6400,0x0000005b,0x00000014,0x0000001b,0x0000000a,0x00000002,0x007300ff,0x0000000a,0x0000001e,0x0000001b,0x0000000a,0x00000002,0x007300ff,0x00000025,0x0000001e,0x0000001b,0x0000000a,0x00000002,0x00ff0000,0x00000040,0x0000001e,0x0000001b,0x0000000a,0x00000002,0x00ff0000,0x0000005b,0x0000001e,0x0000001b,0x0000000a,0x00000002,0x007300ff,0x0000000a,0x00000028,0x0000001b,0x0000000a,0x00000002,0x0000beff,0x00000025,0x00000028,0x0000001b,0x0000000a,0x00000002,0x00ff6400,0x00000040,0x00000028,0x0000001b,0x0000000a,0x00000002,0x00ff00fa,0x0000005b,0x00000028,0x0000001b,0x0000000a,0x00000002,0x007300ff,0x0000000a,0x00000032,0x0000001b,0x0000000a,0x00000002,0x000000ff,0x00000025,0x00000032,0x0000001b,0x0000000a,0x00000002,0x00ffe600,0x00000040,0x00000032,0x0000001b,0x0000000a,0x00000002,0x000000ff,0x0000005b,0x00000032,0x0000001b,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000
    .word 0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000,0x0000006c,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    
    .word 0x003c0300,0x00000001,0x0000ff00,0x0000000a,0x0000000a,0x00000012,0x0000000a,0x00000001,0x007300ff,0x0000001c,0x0000000a,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x0000002e,0x0000000a,0x00000012,0x0000000a,0x00000001,0x007300ff,0x00000040,0x0000000a,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x00000052,0x0000000a,0x00000012,0x0000000a,0x00000001,0x0000beff,0x00000064,0x0000000a,0x00000012,0x0000000a,0x00000001,0x0000beff,0x0000000a,0x00000014,0x00000012,0x0000000a,0x00000001,0x007300ff,0x0000001c,0x00000014,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x0000002e,0x00000014,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x00000040,0x00000014,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x00000052,0x00000014,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000064,0x00000014,0x00000012,0x0000000a,0x00000001,0x000000ff,0x0000000a,0x0000001e,0x00000012,0x0000000a,0x00000001,0x0000beff,0x0000001c,0x0000001e,0x00000012,0x0000000a,0x00000001,0x007300ff,0x0000002e,0x0000001e,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x00000040,0x0000001e,0x00000012,0x0000000a,0x00000001,0x007300ff,0x00000052,0x0000001e,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000064,0x0000001e,0x00000012,0x0000000a,0x00000001,0x00ff0000,0x0000000a,0x00000028,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x0000001c,0x00000028,0x00000012,0x0000000a,0x00000001,0x00ff0000,0x0000002e,0x00000028,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000040,0x00000028,0x00000012,0x0000000a,0x00000001,0x00ff6400,0x00000052,0x00000028,0x00000012,0x0000000a,0x00000001,0x000000ff,0x00000064,0x00000028,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x0000000a,0x00000032,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x0000001c,0x00000032,0x00000012,0x0000000a,0x00000001,0x000000ff,0x0000002e,0x00000032,0x00000012,0x0000000a,0x00000001,0x00ff0000,0x00000040,0x00000032,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000052,0x00000032,0x00000012,0x0000000a,0x00000001,0x0000beff,0x00000064,0x00000032,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x0000000a,0x0000003c,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x0000001c,0x0000003c,0x00000012,0x0000000a,0x00000001,0x000000ff,0x0000002e,0x0000003c,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000040,0x0000003c,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x00000052,0x0000003c,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000064,0x0000003c,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x0000000a,0x00000046,0x00000012,0x0000000a,0x00000001,0x0000beff,0x0000001c,0x00000046,0x00000012,0x0000000a,0x00000001,0x007300ff,0x0000002e,0x00000046,0x00000012,0x0000000a,0x00000001,0x00ff6400,0x00000040,0x00000046,0x00000012,0x0000000a,0x00000001,0x0000beff,0x00000052,0x00000046,0x00000012,0x0000000a,0x00000001,0x0000beff,0x00000064,0x00000046,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x0000000a,0x00000050,0x00000012,0x0000000a,0x00000001,0x007300ff,0x0000001c,0x00000050,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x0000002e,0x00000050,0x00000012,0x0000000a,0x00000001,0x00ff0000,0x00000040,0x00000050,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x00000052,0x00000050,0x00000012,0x0000000a
    .word 0x00000001,0x000000ff,0x00000064,0x00000050,0x00000012,0x0000000a,0x00000001,0x000000ff,0x0000000a,0x0000005a,0x00000012,0x0000000a,0x00000001,0x00ff6400,0x0000001c,0x0000005a,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x0000002e,0x0000005a,0x00000012,0x0000000a,0x00000001,0x00ff6400,0x00000040,0x0000005a,0x00000012,0x0000000a,0x00000001,0x0000beff,0x00000052,0x0000005a,0x00000012,0x0000000a,0x00000001,0x00ff0000,0x00000064,0x0000005a,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x0000000a,0x00000064,0x00000012,0x0000000a,0x00000001,0x0000beff,0x0000001c,0x00000064,0x00000012,0x0000000a,0x00000001,0x00ff00fa,0x0000002e,0x00000064,0x00000012,0x0000000a,0x00000001,0x00ff6400,0x00000040,0x00000064,0x00000012,0x0000000a,0x00000001,0x0000ff00,0x00000052,0x00000064,0x00000012,0x0000000a,0x00000001,0x00ffe600,0x00000064,0x00000064,0x00000012,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000,0x0000006c,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
    
    .word 0x00010300,0x0000000a,0x00ff6400,0x0000000a,0x0000000a,0x0000006c,0x0000003c,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000
    .word 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000,0x0000006c,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000
  
    .word 0x00130700,0x00000003,0x00ff0000,0x00000029,0x00000014,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000038,0x00000014,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x00000047,0x00000014,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x00000013,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x00000022,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x00000031,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x000000ff,0x00000040,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x0000004f,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x0000005e,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x000000ff,0x00000058,0x00000028,0x0000001e,0x0000000a,0x00000003,0x00ff00fa,0x00000013,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff0000,0x00000022,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000031,0x00000032,0x0000000f,0x0000000a,0x00000003,0x007300ff,0x00000040,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x0000004f,0x00000032,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x0000005e,0x00000032,0x0000000f,0x0000000a,0x00000003,0x0000ff00,0x00000029,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000038,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x00000047,0x0000003c,0x0000000f,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000,0x0000006c,0x0000000a,0x008c8c8c,0x00000028,0x00000028,0x00000030,0x0000000a,0x008c8c8c,0x0000000a,0x00000050,0x00000018,0x0000000a,0x008c8c8c,0x0000005e,0x00000050,0x00000018,0x0000000a,0x007c7c7c,0x0000000a,0x00000071,0x0000006c,0x00000005,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000

 #   .word 0x00170600,0x00000003,0x00ffe600,0x00000038,0x00000014,0x0000000f,0x0000000a,0x00000003,0x00ff0000,0x00000047,0x00000014,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000013,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000022,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000031,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x0000ff00,0x00000040,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff0000,0x0000004f,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x0000ff00,0x0000005e,0x0000001e,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x0000000a,0x00000028
 #   .word 0x0000001e,0x0000000a,0x00000003,0x0000ff00,0x00000058,0x00000028,0x0000001e,0x0000000a,0x00000003,0x00ff00fa,0x00000013,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff00fa,0x00000022,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x00000031,0x00000032,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000040,0x00000032,0x0000000f,0x0000000a,0x00000003,0x0000beff,0x0000004f,0x00000032,0x0000000f,0x0000000a,0x00000003,0x000000ff,0x0000005e,0x00000032,0x0000000f,0x0000000a,0x00000003,0x0000ff00,0x00000029,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x00ff6400,0x00000038,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x007300ff,0x00000047,0x0000003c,0x0000000f,0x0000000a,0x00000003,0x00ffe600,0x00000022,0x00000050,0x00000014,0x0000000a,0x00000003,0x00ffe600,0x00000036,0x00000050,0x00000014,0x0000000a,0x00000003,0x00ff00fa,0x0000004a,0x00000050,0x00000014,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000003,0x00ffe600,0x00000029,0x00000014,0x0000000f,0x0000000a,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000
 #   .word 0x00000000,0x00000000,0x00000000,0x008c8c8c,0x00000000,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x00000076,0x00000000,0x0000000a,0x00000076,0x008c8c8c,0x0000000a,0x00000000,0x0000006c,0x0000000a,0x008c8c8c,0x00000028,0x00000028,0x00000030,0x0000000a,0x008c8c8c,0x0000000a,0x00000050,0x00000018,0x0000000a,0x008c8c8c,0x0000005e,0x00000050,0x00000018,0x0000000a,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff000000,0x00000000,0x00000000,0x00000000,0x00000000

custom_levels: .word 0:2655  # struct level[5]

menu_state: .word 0:2  # struct MenuState
game: .word 0:540  # struct Game
editor: .word 0:8  # struct Editor

dirty: .byte 1 # boolean // 1 if state is being intialized






































.text
.globl main

main:
    # menu_state.state, .level_idx, .max_unlocked, .highscore = 0
    la $t0, menu_state
    li $t1, 0
    sb $t1, 0($t0)
    sb $t1, 1($t0)
    sb $t1, 2($t0)
    sw $t1, 4($t0)
    
    # clear_screen()
    jal fn_clear_screen
    
    # custom_levels[0] = NULL
    la $t1, custom_levels
    li $t0, 1
    sb $t0, 3($t1)
    
game_loop:
    # t2 = menu_state.state <= 3
    lbu $t1, menu_state
    slt $t2, $t1, 4
    
    # t3 = 4 <= menu_state.state <= 5
    li $t8, 3
    sltu $t3, $t1, 6
    sltu $t4, $t8, $t1
    and $t3, $t3, $t4
    
    beq $t2, 1, IF_game_loop_1
    beq $t3, 1, ELIF_game_loop_1
    beq $t1, 6, ELIF_game_loop_2
    beq $t1, 7, ELIF_game_loop_3
    beq $t1, 8, ELIF_game_loop_4
    j ENDIF_game_loop_1
    IF_game_loop_1: # if (t2)  // MAIN MENU:
        jal fn_run_menu
    
        j ENDIF_game_loop_1
    ELIF_game_loop_1: # elif (t3)  // LEVEL SELECT:
        jal fn_run_level_sel_menu
        
        j ENDIF_game_loop_1
    ELIF_game_loop_2: # elif (menu_state.state == 6)  // EDITOR MENU:
        jal fn_run_editor_menu
    
        j ENDIF_game_loop_1
    ELIF_game_loop_3: # elif (menu_state.state == 7)  // EDITOR:
        jal fn_run_editor
    
        j ENDIF_game_loop_1
    ELIF_game_loop_4: # elif (menu_state.state == 8)  // GAME:
        jal fn_run_game
        
    ENDIF_game_loop_1:
    
    b game_loop
    
    
## FUNCTIONS HERE: ###########################################

## STATE MANAGEMENT FUNCTIONS: ###############################

fn_run_menu: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4

    # if (dirty)   // **** INITAL STATE SETUP *****
    lbu $t3, dirty
    beq $t3, 0, ENDIF_run_menu_2
    IF_run_menu_2:
        # clear_screen()
        jal fn_clear_screen
        # draw_menu()
        jal fn_draw_menu
        # menu_update_outline()
        jal fn_menu_update_outline
        
        # dirty = 0
        li $t3, 0
        sb $t3, dirty
    ENDIF_run_menu_2:
    
    
    # if (keyboard.is_pressed)
    lw $t1, ADDR_KBRD
    lw $t2, 0($t1)
    bne $t2, 1, ENDIF_run_menu_3
    IF_run_menu_3:
        # print(keyboard.key)
        li $v0, 1
        lw $a0, 4($t1) # w = 119, s = 115
        syscall
        li $v0, 4
        la $a0, NEWLINE
        syscall
        
        # t2 = (menu_state.state != 0 && keyboard.key == 'w')
        lw $t0, 4($t1)
        lbu $t1, menu_state
        sne $t2, $t1, 0
        seq $t3, $t0, 119
        and $t2, $t2, $t3
        # t3 = (menu_state.state != 3 && keyboard.key == 's')
        sne $t3, $t1, 3
        seq $t4, $t0, 115
        and $t3, $t3, $t4
        
        beq $t2, 1, IF_run_menu_4
        beq $t3, 1, ELIF_run_menu_1
        beq $t0, 32,ELIF_run_menu_2
        j ENDIF_run_menu_4
        IF_run_menu_4: # if (t2)
            # menu_state.state--
            lbu $t1, menu_state
            subi $t1, $t1, 1
            sb $t1, menu_state
            
            # menu_update_outline()
            jal fn_menu_update_outline
            
            j ENDIF_run_menu_4
        ELIF_run_menu_1: # elif (t3)
            # menu_state.state++
            lbu $t1, menu_state
            addi $t1, $t1, 1
            sb $t1, menu_state
            
            # menu_update_outline()
            jal fn_menu_update_outline
            
            j ENDIF_run_menu_4
        ELIF_run_menu_2: # elif (keyboard.key == ' ')
            # // **** STATE CHANGE *****
            
            lbu $t0, menu_state
            beq $t0, 0, IF_run_menu_5
            beq $t0, 1, ELIF_run_menu_3
            beq $t0, 2, ELIF_run_menu_4
            beq $t0, 3, ELIF_run_menu_5
            j ENDIF_run_menu_5
            IF_run_menu_5: # if (menu_state.state == 0)
                # // Switch to GAME state
                
                # menu_state.state = 8
                li $t8, 8
                sb $t8, menu_state
                
                # game -> mode_mask = PLAY_MODE // 00
                # ->level_idx = 0, ->score = 0, ->lives = 3, ->is_paused = 0
                la $t2, game
                li $t8, 0
                sb $t8, 2148($t2)
                li $t9, 4              # TODO: Change level index back to 0
                sb $t9, 2149($t2)
                sb $t8, 2150($t2)
                sw $t8, 2152($t2)
                li $t1, 3
                sw $t1, 2156($t2)
            
                j ENDIF_run_menu_5
            ELIF_run_menu_3: # elif (menu_state.state == 1)
            
                j ENDIF_run_menu_5
            ELIF_run_menu_4: # elif (menu_state.state == 2)
            
                j ENDIF_run_menu_5
            ELIF_run_menu_5: # elif (menu_state.state == 3)
                # exit() // QUIT
                j END_PROG
            ENDIF_run_menu_5:
            
            # dirty = 1 // Flags an initial state switch
            li $t0, 1
            sb $t0, dirty
            
        ENDIF_run_menu_4:
            
    ENDIF_run_menu_3:

    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra



fn_run_level_sel_menu: # () -> void

    # return
    jr $ra



fn_run_editor_menu: # () -> void

    # return
    jr $ra
    
    
    
fn_run_editor: # () -> void

    # return
    jr $ra
    
    
    
fn_run_game: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # // ############### INITIALIZATION
    lbu $t0, dirty
    bne $t0, 1, ENDIF_run_game_1
    IF_run_game_1: # if (dirty) 
        # t1 count = 0
        li $t1, 0
        
        # t0 = &game
        la $t0, game
        
        # t3 = &regular_levels + (game->level_idx) * sizeof(Level)
        la $t4, regular_levels
        lbu $t2, 2149($t0)
        li $t3, 2124  # // level size
        mult $t2, $t3
        mflo $t3
        add $t3, $t4, $t3
        
        LOOP_run_game_1: # while (count < sizeof(level))  // Copy level into game struct
            beq $t1, 2124, ENDLOOP_run_game_1
            
            # *t0 = *t3  // Copy next byte
            lbu $t5, 0($t3)
            sb $t5, 0($t0)
            
            # t0++, t3++  // Increment address to next byte
            addi $t0, $t0, 1
            addi $t3, $t3, 1
            
            # count++
            addi $t1, $t1, 1
            j LOOP_run_game_1
        ENDLOOP_run_game_1:
        
        # game->ball_pos == (60, 102), ->ball_vel = (0, 0), 
        #     ->paddle_pos = (50, 110)
        la $t0, game
        li $t1, 60
        sw $t1, 2124($t0)
        li $t1, 102
        sw $t1, 2128($t0)
        li $t1, 7         # TODO: CHANGE VELOCITY X BACK TO 0
        sw $t1, 2132($t0)   
        li $t1, -3           # TODO: REMOVE THIS LINE, VELOCITY Y CHANGE
        sw $t1, 2136($t0)
        li $t1, 50
        sw $t1, 2140($t0)
        li $t1, 110
        sw $t1, 2144($t0)
        
        # clear_screen
        jal fn_clear_screen
        
        # draw_level(&(game->level))
        la $t0, game
        sw $t0, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_level
        
        # draw_rect(white, game->paddle_pos, Vec(25, 3)) // Draw Paddle
        la $t0, game
        li $t1, 0x00ffffff
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2140($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2144($t0)
        addi $t1, $t1, 10 # // Account for topbar. Actual draw position shifts by 10
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 25
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # draw_rect(gray, game->ball_pos, Vec(3, 3)) // Draw Ball
        la $t0, game
        li $t1, 0x0eeeeee
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2124($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2128($t0)
        addi $t1, $t1, 10 # // Account for topbar. Actual draw position shifts by 10
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # draw_bitmap(Vec(1, 0), &BMP_SCORE) // Draw Score BMP
        li $t1, 16
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 0
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_SCORE
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        # // Draw score integer value
        jal fn_game_update_score
        
        # // Draw paused icon
        jal fn_game_update_paused
        
        # draw_bitmap(Vec(1, 0), &BMP_LVL) // Draw lvl BMP
        li $t1, 65
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 0
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_LVL
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        # draw_int(Vec(88, 2), game->level_idx + 1)  // Draw level integer value
        li $t1, 88
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 2
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t0, game
        lbu $t1, 2149($t0)
        addi $t1, $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_int
    
    
        # if (0 < game->lives):
        la $t0, game
        lw $t1, 5156($t0)
        li $t3, 0
        sltu $t2, $t3, $t1 
        bne $t2, 1, ELSE_run_game_1
        IF_run_game_2:
            # draw_bitmap(Vec(100, 0), &BMP_HEART_EMPTY) // Draw full heart
            li $t1, 100
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
            j ENDIF_run_game_2
        ELSE_run_game_1:
            # draw_bitmap(Vec(100, 0), &BMP_HEART_EMPTY) // Draw empty heart
            li $t1, 100
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART_EMPTY
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        ENDIF_run_game_2:
        
        
        # if (1 < game->lives):
        la $t0, game
        lw $t1, 5156($t0)
        li $t3, 1
        sltu $t2, $t3, $t1 
        bne $t2, 1, ELSE_run_game_2
        IF_run_game_3:
            # draw_bitmap(Vec(108, 0), &BMP_HEART_EMPTY) // Draw full heart
            li $t1, 108
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
            j ENDIF_run_game_3
        ELSE_run_game_2:
            # draw_bitmap(Vec(108, 0), &BMP_HEART_EMPTY) // Draw empty heart
            li $t1, 108
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART_EMPTY
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        ENDIF_run_game_3:
        
        
        # if (2 < game->lives):
        la $t0, game
        lw $t1, 5156($t0)
        li $t3, 2
        sltu $t2, $t3, $t1 
        bne $t2, 1, ELSE_run_game_3
        IF_run_game_4:
            # draw_bitmap(Vec(116, 0), &BMP_HEART_EMPTY) // Draw full heart
            li $t1, 116
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
            
            j ENDIF_run_game_4
        ELSE_run_game_3:
            # draw_bitmap(Vec(116, 0), &BMP_HEART_EMPTY) // Draw empty heart
            li $t1, 116
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 0
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            la $t1, BMP_HEART_EMPTY
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_bitmap
        ENDIF_run_game_4:
        
        
        # dirty = 0
        li $t0, 0
        sb $t0, dirty
        
    ENDIF_run_game_1: 
    # // ############ END INITIALIZATION




    # // ############ MAIN GAME FUNCTIONALITY
    # if (! game->is_paused)
    la $t0, game
    lbu $t1, 2150($t0)
    seq $t2, $t1, 0
    beq $t2, 0, ENDIF_run_game_5
    IF_run_game_5:
        
        # // ####################### Compute Collisions
        
        # TODO: Account for velocity of 0 (divide by 0 error). Do a skip if 0,0
        
        # t1 = game->ball_vel.x
        # t2 = game->ball_vel.y
        la $t0, game
        lw $t1, 2132($t0)
        lw $t2, 2136($t0)
        
        # t4 = abs(t1)
        addi $t4, $t1, 0
        slt $t3, $t1, 0
        beq $t3, 0, ENDIF_run_game_8
        IF_run_game_8:
            neg $t4, $t1
        ENDIF_run_game_8:
        
        # t5 = abs(t2)
        addi $t5, $t2, 0
        slt $t3, $t2, 0
        beq $t3, 0, ENDIF_run_game_9
        IF_run_game_9:
            neg $t5, $t2
        ENDIF_run_game_9:
        
        # t3 = max(t5, t4)
        slt $t3, $t4, $t5
        beq $t3, 1, ELSE_run_game_5
        IF_run_game_10: # if (t5 <= t4)
            addi $t3, $t4, 0
            j ENDIF_run_game_10
        ELSE_run_game_5: # else // t4 < t5
            addi $t3, $t5, 0
        ENDIF_run_game_10:
        
        # t4 = t1 * 2^8,  t5 = t2 * 2^8  // Shift for accurate float division
        sll $t4, $t1, 8
        sll $t5, $t2, 8
        
        # t6 = t4 // t3    // x component of unit vector of velocity
        div $t4, $t3
        mflo $t6
        
        # t7 = t5 // t3   // y component of unit vector of velocity
        div $t5, $t3
        mflo $t7
        
        # 4($sp) = u.x (shifted)
        # 8($sp) = u.y (shifted)
        # 12($sp) = loop_amount = t3 = max(abs(vel.x), abs(vel.y))
        # 16($sp) = i  // loop variable
        # 20($sp) = future_x.x    // new unshifted accurate vector position equal to ball.pos + total_movement + u.x
        # 24($sp) = future_neg_x.x  // new unshifted accurate vector position equal to ball.pos + total_movement - u.x
        # 28($sp) = future_y.x    // Same but for y
        # 32($sp) = future_neg_y.x  // Same but for y
        # 36($sp) = collide_x
        # 40($sp) = collide_neg_x
        # 44($sp) = collide_y
        # 48($sp) = collide_neg_y
        # 52($sp) = total_movement.x (shifted) = 0
        # 56($sp) = total_movement.y (shifted) = 0
        # 60($sp) = b   // Brick loop variable
        # 64($sp) = w   // Wall loop variable
        # 68($sp) = ptr   // Stores pointer into Brick or Wall arrays
        # 72($sp) = future_x.y
        # 76($sp) = future_neg_x.y
        # 80($sp) = future_y
        # 84($sp) = future_neg_y.y
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        li $t9, 0
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        subi $sp, $sp, 4
        li $t8, 0
        sw $t8, 0($sp)
        subi $sp, $sp, 4
        sw $t3, 0($sp)
        subi $sp, $sp, 4
        sw $t7, 0($sp)
        subi $sp, $sp, 4
        sw $t6, 0($sp)
        subi $sp, $sp, 4
        
        # // Loop max(abs(vel.x), abs(vel.y)) times because that times the unit vector will yield the velocity
        LOOP_run_game_2: # while (i < loop_amount)
            lw $t0, 16($sp)
            lw $t1, 12($sp)
            beq $t0, $t1, ENDLOOP_run_game_2
        
            # future_x = Vec(game.ball_pos.x + unshift(total_movement.x + u.x), 
            #                game.ball_pos.y + unshift(total_movement.y))
            la $t0, game
            lw $t1, 2124($t0)  # t1 = ball_pos.x
            lw $t2, 2128($t0)  # t2 = ball_pos.y
            lw $t3, 52($sp)  # t3 = total_movement.x
            lw $t4, 56($sp)  # t4 = total_movement.y
            lw $t5, 4($sp)  # t5 = u.x
            lw $t6, 8($sp)  # t6 = u.y
            
            add $t7, $t3, $t5  # t7 = total_movement.x + u.x
            sra $t7, $t7, 8  # t7 = unshift(total_movement.x + u.x)
            sra $t8, $t4, 8  # t8 = unshift(total_movement.y)
            add $t7, $t1, $t7  # t7 = ball_pos.x + unshift(total_movement.x + u.x)
            add $t8, $t2, $t8  # t8 = ball_pos.y + unshift(total_movement.y)
            sw $t7, 20($sp)  # future_x = Vec(t7, t8)
            sw $t8, 72($sp)
            
            # future_neg_x = Vec(game.ball_pos.x + unshift(total_movement.x - u.x), 
            #                game.ball_pos.y + unshift(total_movement.y))
            sub $t7, $t3, $t5  # t7 = total_movement.x - u.x
            sra $t7, $t7, 8  # t7 = unshift(total_movement.x - u.x)
            add $t7, $t1, $t7  # t7 = ball_pos.x + unshift(total_movement.x - u.x)
            sw $t7, 24($sp)  # future_neg_x = Vec(t7, t8)
            sw $t8, 76($sp)
            
            # future_y = Vec(game.ball_pos.x + unshift(total_movement.x), 
            #                game.ball_pos.y + unshift(total_movement.y + u.y))
            sra $t7, $t3, 8  # t7 = unshift(total_movement.x)
            add $t8, $t4, $t6  # t8 = total_movement.y + u.y
            sra $t8, $t8, 8  # t8 = unshift(total_movement.y + u.y)
            add $t7, $t1, $t7  # t7 = ball_pos.x + unshift(total_movement.x)
            add $t8, $t2, $t8  # t8 = ball_pos.y + unshift(total_movement.y + u.y)
            sw $t7, 28($sp)  # future_y = Vec(t7, t8)
            sw $t8, 80($sp)
            
            # future_neg_y = Vec(game.ball_pos.x + unshift(total_movement.x), 
            #                game.ball_pos.y + unshift(total_movement.y - u.y))
            sub $t8, $t4, $t6  # t8 = total_movement.y - u.y
            sra $t8, $t8, 8  # t8 = unshift(total_movement.y - u.y)
            add $t8, $t2, $t8  # t8 = ball_pos.y + unshift(total_movement.y - u.y)
            sw $t7, 32($sp)  # future_neg_y = Vec(t7, t8)
            sw $t8, 84($sp)
    
            # collide_x, collide_neg_x, collide_y, collide_neg_y = 0
            li $t0, 0
            sw $t0, 36($sp)
            sw $t0, 40($sp)
            sw $t0, 44($sp)
            sw $t0, 48($sp)
        
            # b = 0
            li $t0, 0
            sw $t0, 60($sp)
            
            # ptr = &(game.level.bricks)
            la $t0, game
            addi $t0, $t0, 4
            sw $t0, 68($sp)
            
            LOOP_run_game_3: # while (b < num_bricks)
                la $t0, game
                lbu $t1, 2($t0)
                lw $t2, 60($sp)
                beq $t1, $t2, ENDLOOP_run_game_3
            
                # if (ptr->life != 0)   // Brick != NULL
                lw $t0, 68($sp)
                lw $t1, 0($t0)
                beq $t1, 0, ENDIF_run_game_11
                IF_run_game_11:
                    # if (rect_collide(brick, future_x))
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 36($sp)  # future_x.x   // 20($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 92($sp)  # future_x.y   // 72($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_12
                    IF_run_game_12:
                        # collide_x = 1
                        li $t1, 1
                        sw $t1, 36($sp)
                        
                        # brick.life--
                        # lw $t0, 68($sp)
                        # lw $t1, 0($t0)
                        # subi $t1, $t1, 1
                        # sw $t1, 0($t0)
                        
                        # if (brick.life == 0)
                        bne $t1, 0, ENDIF_run_game_13
                        IF_run_game_13:
                        
                            # TODO: erase brick, add to score, redraw score
                        
                        ENDIF_run_game_13:
                        
                    ENDIF_run_game_12:
                    
                    
                    # if (rect_collide(brick, future_y))
                    lw $t0, 68($sp)
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 44($sp)  # future_y.x    // 28($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 100($sp)  # future_y.y   // 80($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_14
                    IF_run_game_14:
                        # collide_y = 1
                        li $t1, 1
                        sw $t1, 44($sp)
                        
                        # TODO: Brick removal service
                        
                    ENDIF_run_game_14:
                    
                    
                    
                    # if (rect_collide(brick, future_neg_x))
                    lw $t0, 68($sp)
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 40($sp)  # future_neg_x.x   // 24($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 96($sp)  # future_neg_x.y   // 76($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_15
                    IF_run_game_15:
                        # collide_neg_x = 1
                        li $t1, 1
                        sw $t1, 40($sp)
                    ENDIF_run_game_15:
                    
                    
                    
                    # if (rect_collide(brick, future_neg_y))
                    lw $t0, 68($sp)
                    lw $t1, 8($t0)  # ptr->rect.pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0) # ptr->rect.pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->rect.pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 20($t0)  # ptr->rect.pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 48($sp)  # future_neg_y.x   // 32($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 104($sp)  # future_neg_y.y   // 84($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_16
                    IF_run_game_16:
                        # collide_neg_y = 1
                        li $t1, 1
                        sw $t1, 48($sp)
                    ENDIF_run_game_16:
                    
                    # b++
                    lw $t0, 60($sp)
                    addi $t0, $t0, 1
                    sw $t0, 60($sp)
                    
                ENDIF_run_game_11:
            
                # ptr += sizeof(brick)      // 24
                lw $t0, 68($sp)
                addi $t0, $t0, 24
                sw $t0, 68($sp)
            
                j LOOP_run_game_3
            ENDLOOP_run_game_3:
            
            
            
            # w = 0
            li $t0, 0
            sw $t0, 64($sp)
            
            # ptr = &(game.level.walls)
            la $t0, game
            addi $t0, $t0, 1924
            sw $t0, 68($sp)
            
            LOOP_run_game_4: # while (w < game.level.num_walls)
                la $t0, game
                lbu $t1, 1($t0)
                lw $t2, 64($sp)
                beq $t1, $t2, ENDLOOP_run_game_4
            
                # if (ptr->color != ff000000)    // Wall != NULL
                lw $t0, 68($sp)
                lw $t1, 0($t0)
                srl $t1, $t1, 24
                beq $t1, 255, ENDIF_run_game_17  # // 255 = 0xff
                IF_run_game_17:
                
                    # if (rect_collide(wall, future_x))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 36($sp)  # future_x.x   // 20($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 92($sp)  # future_x.y     // 72($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_18
                    IF_run_game_18:
                        # collide_x = 1
                        li $t1, 1
                        sw $t1, 36($sp)
                    ENDIF_run_game_18:
                
                
                    # if (rect_collide(wall, future_neg_x))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 40($sp)  # future_neg_x.x     // 24($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 96($sp)  # future_neg_x.y     // 76($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_19
                    IF_run_game_19:
                        # collide_neg_x = 1
                        li $t1, 1
                        sw $t1, 40($sp)
                    ENDIF_run_game_19:
                
                
                
                    # if (rect_collide(wall, future_y))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 44($sp)  # future_y.x     // 28($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 100($sp)  # future_y.y    // 80($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_20
                    IF_run_game_20:
                        # collide_y = 1
                        li $t1, 1
                        sw $t1, 44($sp)
                    ENDIF_run_game_20:
                
                
                    # if (rect_collide(wall, future_neg_y))
                    lw $t0, 68($sp)
                    lw $t1, 4($t0)  # ptr->pos.x
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 8($t0) # ptr->pos.y
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 12($t0)  # ptr->pos.w
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 16($t0)  # ptr->pos.h
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 48($sp)  # future_neg_y.x    // 32($sp) + 16
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    lw $t1, 104($sp)  # future_neg_y.y     // 84($sp) + 20
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball width
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    li $t1, 3  # // ball height
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_rect_collide
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    bne $t1, 1, ENDIF_run_game_21
                    IF_run_game_21:
                        # collide_neg_y = 1
                        li $t1, 1
                        sw $t1, 48($sp)
                    ENDIF_run_game_21:
                
                
                    # w++
                    lw $t0, 64($sp)
                    addi $t0, $t0, 1
                    sw $t0, 64($sp)
                    
                ENDIF_run_game_17:
            
                # ptr += sizeof(Rect)      // 20
                lw $t0, 68($sp)
                addi $t0, $t0, 20
                sw $t0, 68($sp)
            
                j LOOP_run_game_4
            ENDLOOP_run_game_4:
        
            
            # if (rect_collide(paddle, future_x))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 36($sp)  # future_x.x      // 20($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 92($sp)  # future_x.y      // 72($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_22
            IF_run_game_22:
                # collide_x = 1
                li $t1, 1
                sw $t1, 36($sp)
            ENDIF_run_game_22:
            
            
            
            
            # if (rect_collide(paddle, future_neg_x))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 40($sp)  # future_neg_x.x     // 24($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 96($sp)  # future_neg_x.y     // 76($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_23
            IF_run_game_23:
                # collide_neg_x = 1
                li $t1, 1
                sw $t1, 40($sp)
            ENDIF_run_game_23:
        
        
        
            # if (rect_collide(paddle, future_y))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 44($sp)  # future_y.x      // 28($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 100($sp)  # future_y.y      // 80($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_24
            IF_run_game_24:
                # collide_y = 1
                li $t1, 1
                sw $t1, 44($sp)
            ENDIF_run_game_24:
        
        
            # if (rect_collide(paddle, future_neg_y))
            la $t0, game
            lw $t1, 2140($t0)  # game.paddle_pos.x
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 2144($t0) # game.paddle_pos.y
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 25  # // paddle_width == 25
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // paddle_height == 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 48($sp)  # future_neg_y.x      // 32($sp) + 16
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            lw $t1, 104($sp)  # future_neg_y.y     // 84($sp) + 20
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball width
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            li $t1, 3  # // ball height
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_rect_collide
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            bne $t1, 1, ENDIF_run_game_25
            IF_run_game_25:
                # collide_neg_y = 1
                li $t1, 1
                sw $t1, 48($sp)
            ENDIF_run_game_25:
        
            
            # if (collide_x)
            lw $t0, 36($sp)
            bne $t0, 1, ELSE_run_game_6
            IF_run_game_26:
                # game.ball_vel.x *= -1   // Collision so invert velocity
                la $t0, game
                lw $t1, 2132($t0)
                neg $t1, $t1
                sw $t1, 2132($t0)
                
                # u.x *= -1    // Invert unit vector velocity
                lw $t1, 4($sp)
                neg $t1, $t1
                sw $t1, 4($sp)
                
                # if (!collide_neg_x)    // Immediately apply opposite movement unless obstructed
                lw $t0, 40($sp)
                beq, $t0, 1, ENDIF_run_game_27
                IF_run_game_27:
                
                    # total_movement.x += u.x
                    lw $t0, 52($sp)
                    lw $t1, 4($sp)
                    add $t0, $t0, $t1
                    sw $t0, 52($sp)
                
                ENDIF_run_game_27:
                
                j ENDIF_run_game_26
            ELSE_run_game_6: # else:
                # total_movement.x += u.x   // Move ball in that direction, no collision so we safe
                lw $t0, 52($sp)
                lw $t1, 4($sp)
                add $t0, $t0, $t1
                sw $t0, 52($sp)
            ENDIF_run_game_26:
            
            
            
            # if (collide_y)
            lw $t0, 44($sp)
            bne $t0, 1, ELSE_run_game_7
            IF_run_game_28:
                # game.ball_vel.y *= -1   // Collision so invert velocity
                la $t0, game
                lw $t1, 2136($t0)
                neg $t1, $t1
                sw $t1, 2136($t0)
                
                # u.y *= -1    // Invert unit vector velocity
                lw $t1, 8($sp)
                neg $t1, $t1
                sw $t1, 8($sp)
                
                # if (!collide_neg_y)    // Immediately apply opposite movement unless obstructed
                lw $t0, 48($sp)
                beq, $t0, 1, ENDIF_run_game_29
                IF_run_game_29:
                
                    # total_movement.y += u.y
                    lw $t0, 56($sp)
                    lw $t1, 8($sp)
                    add $t0, $t0, $t1
                    sw $t0, 56($sp)
                
                ENDIF_run_game_29:
                
                j ENDIF_run_game_28
            ELSE_run_game_7: # else:
                # total_movement.y += u.y   // Move ball in that direction, no collision so we safe
                lw $t0, 56($sp)
                lw $t1, 8($sp)
                add $t0, $t0, $t1
                sw $t0, 56($sp)
            ENDIF_run_game_28:
            
            
            ####### DEBUG: Draws path trace on every velocity calculation
            la $t0, game
            lw $t1, 2124($t0)
            lw $t2, 2128($t0)
            
            lw $t3, 52($sp)
            sra $t3, $t3, 8
            lw $t4, 56($sp)
            sra $t4, $t4, 8
            
            add $t1, $t1, $t3  # t1 = game.ball_pos.x + unshift(total_movement.x)
            add $t2, $t2, $t4  # t2 = game.ball_pos.y + unshift(total_movement.y)
            
            li $t8, 0x0000ffff
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            
            addi $t2, $t2, 10
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            
            li $t1, 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            
            li $t1, 3
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            jal fn_draw_rect
            ########################################
            
            # i++
            lw $t0, 16($sp)
            addi $t0, $t0, 1
            sw $t0, 16($sp)
            j LOOP_run_game_2
        ENDLOOP_run_game_2:
        
        # li $v0, 1
        # lw $a0, 52($sp)
        # syscall
        # li $v0, 4
        # la $a0, SPACE
        # syscall
        # li $v0, 1
        # lw $a0, 56($sp)
        # syscall 
        # li $v0, 4
        # la $a0, NEWLINE
        # syscall
        
        # draw_rect(Rect(BG_COLOR, game.ball_pos, Vec(3, 3)))    // Erase Ball
        # la $t0, game
        # lw $t1, BG_COLOR
        # sw $t1, 0($sp)
        # subi $sp, $sp, 4
        # lw $t1, 2124($t0)
        # sw $t1, 0($sp)
        # subi $sp, $sp, 4
        # lw $t1, 2128($t0)
        # addi $t1, $t1, 10   # // shift for topbar
        # sw $t1, 0($sp)
        # subi $sp, $sp, 4
        # li $t1, 3
        # sw $t1, 0($sp)
        # subi $sp, $sp, 4
        # li $t1, 3
        # sw $t1, 0($sp)
        # subi $sp, $sp, 4
        # jal fn_draw_rect
        
        # game.ball_pos += unshift(total_movement)
        la $t0, game
        lw $t1, 2124($t0)
        lw $t2, 2128($t0)
        lw $t3, 52($sp)
        sra $t3, $t3, 8
        lw $t4, 56($sp)
        sra $t4, $t4, 8
        add $t1, $t1, $t3  # t1 = game.ball_pos.x + unshift(total_movement.x)
        add $t2, $t2, $t4  # t2 = game.ball_pos.y + unshift(total_movement.y)
        sw $t1, 2124($t0)
        sw $t2, 2128($t0)
        
        # li $v0, 1
        # addi $a0, $t1, 0
        # syscall
        # li $v0, 4
        # la $a0, SPACE
        # syscall
        # li $v0, 1
        # addi $a0, $t2, 0
        # syscall 
        # li $v0, 4
        # la $a0, NEWLINE
        # syscall
        
        # draw_rect(Rect(WHITE, game.ball_pos, Vec(3, 3)))    // Draw new ball
        la $t0, game
        li $t1, 0x00ffffff
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2124($t0)
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        lw $t1, 2128($t0)
        addi $t1, $t1, 10   # // shift for topbar
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 3
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
        
        # // ####################### End Compute Collisions
        addi $t1, $t1, 0
        
        
    ENDIF_run_game_5:
    # // ############ END MAIN GAME FUNCTIONALITY
    
    
    
    # // ############ PAUSING FUNCTIONALITY
    # if (keyboard.is_pressed && keyboard.key == 'p')
    lw $t0, ADDR_KBRD
    lw $t1, 0($t0)
    seq $t2, $t1, 1
    lw $t1, 4($t0)
    seq $t3, $t1, 112
    and $t2, $t2, $t3
    bne $t2, 1, ENDIF_run_game_6
    IF_run_game_6:
        la $t0, game
        
        # // Toggle pause
        lbu $t1, 2150($t0)
        beq $t1, 0, ELSE_run_game_4
        IF_run_game_7: # if (game->is_paused)
            # game->is_paused = 0
            li $t1, 0
            sb $t1, 2150($t0)
            
            j ENDIF_run_game_7
        ELSE_run_game_4: # else // !game->is_paused
            # game->is_paused = 1
            li $t1, 1
            sb $t1, 2150($t0)
        ENDIF_run_game_7:
        
        # game_update_paused() // update pause icon graphic
        jal fn_game_update_paused
    ENDIF_run_game_6:
    # // ############ END PAUSING FUNCTIONALITY

    addi $sp, $sp, 84    

    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra



## DRAWING FUNCTIONS: ########################################

# Draw or erase paused icon based on game->is_paused
fn_game_update_paused: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # if (game->is_paused)
    la $t0, game
    lbu $t1, 2150($t0)
    beq $t1, 0, ELSE_game_update_paused_1
    IF_game_update_paused_1:
        # draw_bitmap(Vec(1, 1), &BMP_PAUSED) // Draw paused icon BMP
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t1, BMP_PAUSED
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        
        j ENDIF_game_update_paused_1
    ELSE_game_update_paused_1:
        # draw_rect(Rect(BG_COLOR, Vec(1, 1), Vec(10, 10)))
        lw $t1, BG_COLOR
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 1
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        li $t1, 9
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_rect
    
    ENDIF_game_update_paused_1:
    
    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra


# Use global game variable to read and update the visual score display
fn_game_update_score: # () -> void
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    
    # draw_int(Vec(50, 2), game->score)
    li $t1, 50
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    li $t1, 2
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    la $t0, game
    lw $t1, 2152($t0)
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_int
    
    # return
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    jr $ra
    

# Draws the level whose first byte is at the address specified by ptr
fn_draw_level: # (int ptr) -> void
    subi $sp, $sp, 4
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    # 4($sp) obj_count
    # 8($sp) i    // Valid object iteration count
    # 12($sp) = link
    # 16($sp) = j   // Total iteration count
    # 20($sp) ptr
    
    # if (! ptr->is_null)
    lw $t0, 20($sp)
    lbu $t1, 3($t0)
    beq $t1, 1, ENDIF_draw_level_1
    IF_draw_level_1:
        
        # i = 0
        li $t0, 0
        sw $t0, 8($sp)
        
        # j = 0
        li $t0, 0
        sw $t0, 16($sp)
        
        # obj_count = ptr->num_bricks
        lw $t0, 20($sp)
        lbu $t1, 2($t0)
        sw $t1, 4($sp)
        
        LOOP_draw_level_1: # while i < obj_count
            lw $t0, 8($sp)
            lw $t1, 4($sp)
            beq $t0, $t1, ENDLOOP_draw_level_1
        
            # t0 = &(ptr->bricks)
            lw $t0, 20($sp)
            addi $t0, $t0, 4
            
            # t0 += j * sizeof(Brick)
            lw $t1, 16($sp) # // i
            li $t2, 24  # // Brick size
            mult $t1, $t2
            mflo $t1
            add $t0, $t0, $t1
            
            # if (t0->life != 0)
            lw $t1, 0($t0)
            beq $t1, 0, ENDIF_draw_level_2
            IF_draw_level_2:
                
                # draw_rect(t0->rect.color, t0->rect.pos, t0->rect.w_h) // Draw brick
                lw $t1, 4($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t0)
                addi $t1, $t1, 10 # // Shift 10 to account for topbar
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 20($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_rect
                
                # i++
                lw $t0, 8($sp)
                addi $t0, $t0, 1
                sw $t0, 8($sp)
                
            ENDIF_draw_level_2:
            
            # j++
            lw $t0, 16($sp)
            addi $t0, $t0, 1
            sw $t0, 16($sp)
        
            j LOOP_draw_level_1
        ENDLOOP_draw_level_1:
        
        # i = 0
        li $t0, 0
        sw $t0, 8($sp)
        
        # j = 0
        li $t0, 0
        sw $t0, 16($sp)
        
        # obj_count = ptr->num_walls
        lw $t0, 20($sp)
        lbu $t1, 1($t0)
        sw $t1, 4($sp)
        
        LOOP_draw_level_2: # while i < obj_count
            lw $t0, 8($sp)
            lw $t1, 4($sp)
            beq $t0, $t1, ENDLOOP_draw_level_2
        
            # t0 = &(ptr->walls)
            lw $t0, 20($sp)
            addi $t0, $t0, 1924
            
            # t0 += j * sizeof(Rect)
            lw $t1, 16($sp) # // i
            li $t2, 20  # // Rect (Wall) size
            mult $t1, $t2
            mflo $t1
            add $t0, $t0, $t1
            
            # if (t0->color < ff000000)
            lw $t1, 0($t0)
            sltu $t1, $t1, 0xff000000
            beq $t1, 0, ENDIF_draw_level_3
            IF_draw_level_3:
                
                # draw_rect(t0->color, t0->pos, t0->w_h) // Draw brick
                lw $t1, 0($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 4($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 8($t0)
                addi $t1, $t1, 10 # // Shift 10 to account for topbar
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 12($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                lw $t1, 16($t0)
                sw $t1, 0($sp)
                subi $sp, $sp, 4
                jal fn_draw_rect
                
                # i++
                lw $t0, 8($sp)
                addi $t0, $t0, 1
                sw $t0, 8($sp)
                
            ENDIF_draw_level_3:
            
            # j++
            lw $t0, 16($sp)
            addi $t0, $t0, 1
            sw $t0, 16($sp)
        
            j LOOP_draw_level_2
        ENDLOOP_draw_level_2:
        
    ENDIF_draw_level_1:
    
    # return
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    jr $ra



# Read menu state and redraw button outlines based on which button is selected
fn_menu_update_outline: # () -> void
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 39
    li $t1, 45
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    li $t0, 39
    li $t1, 65
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    li $t0, 39
    li $t1, 85
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_OUTLINE_ERASE)
    li $t0, 39
    li $t1, 105
    la $t2, BMP_BUTTON_OUTLINE_ERASE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    
    
    lbu $t0, menu_state
    beq $t0, 0, IF_fn_menu_update_outline_1 
    beq $t0, 1, ELIF_fn_menu_update_outline_1
    beq $t0, 2, ELIF_fn_menu_update_outline_2
    beq $t0, 3, ELIF_fn_menu_update_outline_3
    j ENDIF_fn_menu_update_outline_1
    IF_fn_menu_update_outline_1: # if (menu_state.state == 0)
        li $t1, 45 # t1 h = 45
        j ENDIF_fn_menu_update_outline_1
    ELIF_fn_menu_update_outline_1: # elif (menu_state.state == 1)
        li $t1, 65 # t1 h = 65
        j ENDIF_fn_menu_update_outline_1
    ELIF_fn_menu_update_outline_2: # elif (menu_state.state == 2)
        li $t1, 85 # t1 h = 85
        j ENDIF_fn_menu_update_outline_1
    ELIF_fn_menu_update_outline_3: # elif (menu_state.state == 3)
        li $t1, 105 # t1 h = 105
    ENDIF_fn_menu_update_outline_1:
    
    # draw_bitmap(Vec(39, h), &BMP_BUTTON_OUTLINE)
    li $t0, 39
    la $t2, BMP_BUTTON_OUTLINE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    addi $sp, $sp, 4
    lw $ra, 0($sp)
    
    # return
    jr $ra
    

# Render the menu without any buttons selected
fn_draw_menu: # () -> void
    # draw_bitmap(Vec(0, 5), &BMP_TITLE)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 0
    li $t1, 5
    la $t2, BMP_TITLE
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # draw_bitmap(Vec(39, 45), &BMP_BUTTON_PLAY)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 39
    li $t1, 45
    la $t2, BMP_BUTTON_PLAY
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # draw_bitmap(Vec(39, 65), &BMP_BUTTON_LEVELS)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 39
    li $t1, 65
    la $t2, BMP_BUTTON_LEVELS
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # draw_bitmap(Vec(39, 85), &BMP_BUTTON_EDIT)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 39
    li $t1, 85
    la $t2, BMP_BUTTON_EDIT
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # draw_bitmap(Vec(39, 105), &BMP_BUTTON_QUIT)
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    li $t0, 39
    li $t1, 105
    la $t2, BMP_BUTTON_QUIT
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_bitmap
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # return
    jr $ra


# Color entire screen black
fn_clear_screen: # () -> void
    # draw_rect(Rect(BG_COLOR, Vec(0, 0), Vec(128, 128))) // Erase whole screen
    sw $ra, 0($sp)
    subi $sp, $sp, 4
    lw $t0, BG_COLOR
    li $t1, 0
    li $t2, 0
    li $t3, 128
    li $t4, 128
    sw $t0, 0($sp)
    subi $sp, $sp, 4
    sw $t1, 0($sp)
    subi $sp, $sp, 4
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    sw $t3, 0($sp)
    subi $sp, $sp, 4
    sw $t4, 0($sp)
    subi $sp, $sp, 4
    jal fn_draw_rect
    add $sp, $sp, 4
    lw $ra, 0($sp)
    
    # return
    jr $ra




## UTILITY FUNCTIONS: ########################################

# Convert an (x,y) Vec struct to a a display address
fn_vec2addr: # (Vec) -> int
    # x, y = Vec
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    
    li $t2, 0 # cur_addr = 0
    
    # x_shift = 4 * x
    li $t4, 4
    mult $t0, $t4
    mflo $t4
    
    # cur_addr += x_shift
    add $t2, $t2, $t4
    
    # y_shift = 4 * 128 * y
    lw $t5, SCREEN_WIDTH 
    li $t4, 4
    mult $t5, $t4
    mflo $t4 # // t4 = 4 * 128, bytes to shift a whole display row
    mult $t4, $t1
    mflo $t4
    
    # cur_addr += y_shift
    add $t2, $t2, $t4
    
    # return t0
    sw $t2, 0($sp)
    subi $sp, $sp, 4
    jr $ra
    
    
    
    
# Given value, draw base 10 integer (supports multidigit) using addr as topleft
# Precondition: val has <= 9 digits
fn_draw_int: # (Vec top_left, int val) -> void
    # t0 x, t1 y, t2 val = addr, val
    addi $sp, $sp 4
    lw $t2, 0($sp)
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp 4
    lw $t0, 0($sp)
    
    # if (val == 0)
    bne $t2, 0, ENDIF_fn_draw_int_0
    IF_fn_draw_int_0:
        # draw_bitmap(Vec(x,y), &BMP_ZERO)
        sw $ra, 0($sp)
        subi $sp, $sp, 4
        sw $t0, 0($sp)
        subi $sp, $sp, 4
        sw $t1, 0($sp)
        subi $sp, $sp, 4
        la $t9, BMP_ZERO
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        jal fn_draw_bitmap
        addi $sp, $sp, 4
        lw $ra, 0($sp)
    
        # return
        j ENDLOOP_fn_draw_int_2
    ENDIF_fn_draw_int_0:

    # t4 counter = 0
    li $t4, 0
    
    LOOP_fn_draw_int_1: # while (val != 0)
        beq $t2, 0, ENDLOOP_fn_draw_int_1
        
        # t3 digit = val % 10
        # t2 val = val // 10
        li $t3, 10
        div $t2, $t3
        mflo $t2
        mfhi $t3
        
        # stack.push(digit)
        sw $t3, 0($sp)
        subi $sp, $sp, 4
        
        # counter++
        addi $t4, $t4, 1
        
        j LOOP_fn_draw_int_1
    ENDLOOP_fn_draw_int_1:
    
    LOOP_fn_draw_int_2: # while (counter > 0)
        beq $t4, 0, ENDLOOP_fn_draw_int_2
        
        # t3 digit = stack.pop()
        addi $sp, $sp, 4
        lw $t3, 0($sp)
        
        beq $t3, 0, IF_fn_draw_int_1
        beq $t3, 1, ELIF_fn_draw_int_1
        beq $t3, 2, ELIF_fn_draw_int_2
        beq $t3, 3, ELIF_fn_draw_int_3
        beq $t3, 4, ELIF_fn_draw_int_4
        beq $t3, 5, ELIF_fn_draw_int_5
        beq $t3, 6, ELIF_fn_draw_int_6
        beq $t3, 7, ELIF_fn_draw_int_7
        beq $t3, 8, ELIF_fn_draw_int_8
        beq $t3, 9, ELIF_fn_draw_int_9
        IF_fn_draw_int_1: # if digit == 0
            la $t5, BMP_ZERO # t5 BitMap map = BMP_ZERO
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_1: # elif digit == 1
            la $t5, BMP_ONE # BitMap map = BMP_ONE
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_2: # elif digit == 2
            la $t5, BMP_TWO # BitMap map = BMP_TWO
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_3: # elif digit == 3
            la $t5, BMP_THREE # BitMap map = BMP_THREE
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_4: # elif digit == 4
            la $t5, BMP_FOUR # BitMap map = BMP_FOUR
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_5: # elif digit == 5
            la $t5, BMP_FIVE # BitMap map = BMP_FIVE
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_6: # elif digit == 6
            la $t5, BMP_SIX # BitMap map = BMP_SIX
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_7: # elif digit == 7
            la $t5, BMP_SEVEN # BitMap map = BMP_SEVEN
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_8: # elif digit == 8
            la $t5, BMP_EIGHT # BitMap map = BMP_EIGHT
            j ENDIF_fn_draw_int_1
        ELIF_fn_draw_int_9: # elif digit == 9
            la $t5, BMP_NINE # BitMap map = BMP_NINE
            j ENDIF_fn_draw_int_1
        ENDIF_fn_draw_int_1:
        
        # t6 i, t7 j = 0
        li $t6, 0
        li $t7, 0
        
        # t2 width = map.width
        # t3 height = map.height
        lw $t2, 0($t5)
        lw $t3, 4($t5)
        
        # map = &map.pixels
        addi $t5, $t5, 8
        
        LOOP_fn_draw_int_3: # while (j != height)
            beq $t7, $t3, ENDLOOP_fn_draw_int_3
            
            # i = 0
            li $t6, 0
        
            LOOP_fn_draw_int_4: # while (i != height)
                beq $t6, $t2, ENDLOOP_fn_draw_int_4
                
                # if (*map != 0xff******)
                lw $t8, 0($t5)
                srl $t8, $t8, 24
                beq $t8, 0xff, ENDIF_fn_draw_int_2
                IF_fin_draw_int_2:
                    # t8 cur_x = x + i
                    # t9 cur_y = y + j
                    add $t8, $t0, $t6
                    add $t9, $t1, $t7
                    
                    # stack.push(t0 x, t1, y, t2 width, t3 height, t4 counter, t5 map, t6 i, t7 j)
                    sw $t0, 0($sp)
                    subi $sp, $sp, 4
                    sw $t1, 0($sp)
                    subi $sp, $sp, 4
                    sw $t2, 0($sp)
                    subi $sp, $sp, 4
                    sw $t3, 0($sp)
                    subi $sp, $sp, 4
                    sw $t4, 0($sp)
                    subi $sp, $sp, 4
                    sw $t5, 0($sp)
                    subi $sp, $sp, 4
                    sw $t6, 0($sp)
                    subi $sp, $sp, 4
                    sw $t7, 0($sp)
                    subi $sp, $sp, 4
                    
                    # t8 addr = vec2addr(Vec(cur_x, cur_y))
                    sw $ra, 0($sp)
                    subi $sp, $sp, 4
                    sw $t8, 0($sp)
                    subi $sp, $sp, 4
                    sw $t9, 0($sp)
                    subi $sp, $sp, 4
                    jal fn_vec2addr
                    addi $sp, $sp, 4
                    lw $t8, 0($sp)
                    addi $sp, $sp, 4
                    lw $ra, 0($sp)
                    
                    # repeat(7, stack.pop())
                    addi $sp, $sp, 4
                    lw $t7, 0($sp)
                    addi $sp, $sp, 4
                    lw $t6, 0($sp)
                    addi $sp, $sp, 4
                    lw $t5, 0($sp)
                    addi $sp, $sp, 4
                    lw $t4, 0($sp)
                    addi $sp, $sp, 4
                    lw $t3, 0($sp)
                    addi $sp, $sp, 4
                    lw $t2, 0($sp)
                    addi $sp, $sp, 4
                    lw $t1, 0($sp)
                    addi $sp, $sp, 4
                    lw $t0, 0($sp)
                    
                    # display[addr] = *map
                    lw $t9, ADDR_DSPL
                    add $t9, $t9, $t8
                    lw $t8, 0($t5)
                    sw $t8, 0($t9)
                ENDIF_fn_draw_int_2:
                
                # map++
                addi $t5, $t5, 4
                
                # i++
                addi $t6, $t6, 1
                j LOOP_fn_draw_int_4
            ENDLOOP_fn_draw_int_4:
            
            # j++
            addi $t7, $t7, 1
            j LOOP_fn_draw_int_3
        ENDLOOP_fn_draw_int_3:
        
        # x += width + 2
        add $t0, $t0, $t2
        addi $t0, $t0, 2
        
        # counter--
        subi $t4, $t4, 1
        
        j LOOP_fn_draw_int_2
    ENDLOOP_fn_draw_int_2:
    
    # return
    jr $ra
    
# Erase a rectangular region of the screen
fn_draw_rect: # (Rect rect) -> void
    # t0 x, t1 y = rect.pos
    # t2 w, t3 h = rect.w_h
    # t6 col = rect.color
    addi $sp, $sp, 4
    lw $t3, 0($sp)
    addi $sp, $sp, 4
    lw $t2, 0($sp)
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    addi $sp, $sp, 4
    lw $t6 0($sp)
    
    # t4 i, t5 j = 0
    li $t4, 0
    li $t5, 0
    
    LOOP_fn_erase_1: # while (j < h)
        beq $t5, $t3, ENDLOOP_fn_erase_1 
    
        # i = 0
        li $t4, 0
        
        LOOP_fn_erase_2: # while (i < w)
            beq $t4, $t2, ENDLOOP_fn_erase_2
        
            # t8 cur_x = x + i
            # t9 cur_y = y + j
            add $t8, $t0, $t4
            add $t9, $t1, $t5
            
            # stack.push(t0 x, t1, y, t2 w, t3 h, t4 i, t5 j, t6 col)
            sw $t0, 0($sp)
            subi $sp, $sp, 4
            sw $t1, 0($sp)
            subi $sp, $sp, 4
            sw $t2, 0($sp)
            subi $sp, $sp, 4
            sw $t3, 0($sp)
            subi $sp, $sp, 4
            sw $t4, 0($sp)
            subi $sp, $sp, 4
            sw $t5, 0($sp)
            subi $sp, $sp, 4
            sw $t6, 0($sp)
            subi $sp, $sp, 4
            
            # t8 addr = vec2addr(Vec(cur_x, cur_y))
            sw $ra, 0($sp)
            subi $sp, $sp, 4
            sw $t8, 0($sp)
            subi $sp, $sp, 4
            sw $t9, 0($sp)
            subi $sp, $sp, 4
            jal fn_vec2addr
            addi $sp, $sp, 4
            lw $t8, 0($sp)
            addi $sp, $sp, 4
            lw $ra, 0($sp)
            
            # repeat(7, stack.pop())
            addi $sp, $sp, 4
            lw $t6, 0($sp)
            addi $sp, $sp, 4
            lw $t5, 0($sp)
            addi $sp, $sp, 4
            lw $t4, 0($sp)
            addi $sp, $sp, 4
            lw $t3, 0($sp)
            addi $sp, $sp, 4
            lw $t2, 0($sp)
            addi $sp, $sp, 4
            lw $t1, 0($sp)
            addi $sp, $sp, 4
            lw $t0, 0($sp)
        
            # display[addr] = *map
            lw $t9, ADDR_DSPL
            add $t9, $t9, $t8
            sw $t6, 0($t9)
        
            # i++
            addi $t4, $t4, 1
            j LOOP_fn_erase_2
        ENDLOOP_fn_erase_2:
        
        # j++
        addi $t5, $t5, 1
        j LOOP_fn_erase_1
    ENDLOOP_fn_erase_1:
    
    # return
    jr $ra
    
    
# Draw bitmap at given address using addr as topleft of display
fn_draw_bitmap: # (Vec top_left, int bitmap_addr) -> void
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    subi $sp, $sp, 4
    # 4($sp) i
    # 8($sp) j
    # 12($sp) w
    # 16($sp) h
    # 20($sp) bmp_addr
    # 24($sp) y
    # 28($sp) x
    
    # i, j = 0
    li $t0, 0
    sw $t0, 4($sp)
    sw $t0, 8($sp)
    
    # w, h = bmp_addr->width, bmp_addr->height
    lw $t0, 20($sp)
    lw $t1, 0($t0)
    lw $t2, 4($t0)
    sw $t1, 12($sp)
    sw $t2, 16($sp)
    
    # bitmap_addr += 8
    lw $t0, 20($sp)
    addi $t0, $t0, 8
    sw $t0, 20($sp)
    
    LOOP_fn_draw_bitmap_1: # while (j < h)
        lw $t0, 8($sp)
        lw $t1, 16($sp) 
        beq $t0, $t1, ENDLOOP_fn_draw_bitmap_1
    
        # i = 0
        li $t0, 0
        sw $t0, 4($sp)
    
        LOOP_fn_draw_bitmap_2: # while (i < w)
            lw $t0, 4($sp)
            lw $t1, 12($sp) 
            beq $t0, $t1, ENDLOOP_fn_draw_bitmap_2
            
            # if (*bitmap_addr != 0xff******)
            lw $t0, 20($sp)
            lw $t1, 0($t0)
            srl $t1, $t1, 24
            beq $t1, 0xff, ENDIF_fn_draw_bitmap_1
            IF_fn_draw_bitmap_1:
            
                # t8 cur_x, t9 cur_y = x + i, y + j
                lw $t0, 28($sp)
                lw $t1, 24($sp)
                lw $t2, 4($sp)
                lw $t3, 8($sp)
                add $t8, $t0, $t2
                add $t9, $t1, $t3
                
                # t0 addr = vec2addr(Vec(cur_x, cur_y))
                sw $ra, 0($sp)
                subi $sp, $sp, 4
                sw $t8, 0($sp)
                subi $sp, $sp, 4
                sw $t9, 0($sp)
                subi $sp, $sp, 4
                jal fn_vec2addr
                addi $sp, $sp, 4
                lw $t0, 0($sp)
                addi $sp, $sp, 4
                lw $ra, 0($sp)
            
                # display[addr] = *bitmap_addr
                lw $t1, ADDR_DSPL
                add $t1, $t1, $t0
                lw $t2, 20($sp)
                lw $t3, 0($t2)
                sw $t3, 0($t1)
            ENDIF_fn_draw_bitmap_1:
            
            # bitmap_addr += 4
            lw $t0, 20($sp)
            addi $t0, $t0, 4
            sw $t0, 20($sp)
        
            # i++
            lw $t0, 4($sp)
            addi $t0, $t0, 1
            sw $t0, 4($sp)
        
            j LOOP_fn_draw_bitmap_2
        ENDLOOP_fn_draw_bitmap_2:
        
        # j++
        lw $t0, 8($sp)
        addi $t0, $t0, 1
        sw $t0, 8($sp)
    
        j LOOP_fn_draw_bitmap_1
    ENDLOOP_fn_draw_bitmap_1:
    
    # // pop entire stack frame
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    addi $sp, $sp, 4
    
    # return
    jr $ra
    
    
# Return 1 if rects collide, else 0
fn_rect_collide: # (Vec r1_tl, Vec r1_wh, Vec r2_tl, Vec r2_wh) -> int
    # t0 = r1.x
    # t1 = r1.w
    # t2 = r1.y
    # t3 = r1.h
    # t4 = r2.x
    # t5 = r2.w
    # t6 = r2.y 
    # t7 = r2.h
    addi $sp, $sp, 4
    lw $t7, 0($sp)
    addi $sp, $sp, 4
    lw $t5, 0($sp)
    addi $sp, $sp, 4
    lw $t6, 0($sp)
    addi $sp, $sp, 4
    lw $t4, 0($sp)
    addi $sp, $sp, 4
    lw $t3, 0($sp)
    addi $sp, $sp, 4
    lw $t1, 0($sp)
    addi $sp, $sp, 4
    lw $t2, 0($sp)
    addi $sp, $sp, 4
    lw $t0, 0($sp)
    
    # t1 = r1.x + r1.w
    add $t1, $t0, $t1
    # t3 = r1.y + r1.h
    add $t3, $t2, $t3
    # t5 = r2.x + r2.w
    add $t5, $t4, $t5
    # t7 = r2.y + r2.h
    add $t7, $t6, $t7
    
    # s7 = ( (t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)) && (t6 < t2 <= t7 || t6 < t3 < t7) || (t3 == t7 && t2 == t6))
    slt $t8, $t1, $t5 # // t8 = t1 < t5 
    slt $t9, $t4, $t1 # // t9 = t4 < t1
    and $t8, $t8, $t9 # // t8 = t4 < t1 < t5
    slt $t9, $t0, $t5 # // t9 = t0 < t5
    slt $s0, $t4, $t0 # // s0 = t4 < t0
    and $t9, $t9, $s0 # // t9 = t4 < t0 < t5
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5
    
    seq $t9, $t1, $t5 # // t9 = t1 == t5
    seq $s0, $t0, $t4 # // s0 = t0 == t4
    and $t9, $t9, $s0 # // t9 = t1 == t5 && t0 == t4
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)
    
    slt $t9, $t6, $t2 # // t9 = t6 < t2
    slt $s0, $t2, $t7 # // s0 = t2 < t7
    and $t9, $t9, $s0 # // t9 = t6 < t2 < t7
    slt $s0, $t6, $t3 # // s0 = t6 < t3
    slt $s1, $t3, $t7 # // s1 = t3 < t7
    and $s0, $s0,$s1 # // s0 = t6 < t3 < t7
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7
    
    seq $s0, $t3, $t7 # // s0 = t3 == t7
    seq $s1, $t2, $t6 # // s1 = t2 == t6
    and $s0, $s0, $s1 # // s0 = t3 == t7 && t2 == t6
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7 || (t3 == t7 && t2 == t6)
    
    and $s7, $t8, $t9 # // s7 = (t4 <= t1 <= t5 || t4 <= t0 <= t5) && (t6 <= t2 <= t7 || t6 <= t3 <= t7)
    
    # // Swap rectangles. We need to check both ways, otherwise case where r2 inside r1 returns false
    # t0 <=> t4
    addi $t8, $t0, 0
    addi $t0, $t4, 0
    addi $t4, $t8, 0
    # t1 <=> t5
    addi $t8, $t1, 0
    addi $t1, $t5, 0
    addi $t5, $t8, 0
    # t2 <=> t6
    addi $t8, $t2, 0
    addi $t2, $t6, 0
    addi $t6, $t8, 0
    # t3 <=> t7
    addi $t8, $t3, 0
    addi $t3, $t7, 0
    addi $t7, $t8, 0
    
    # s6 = ( (t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)) && (t6 < t2 <= t7 || t6 < t3 < t7) || (t3 == t7 && t2 == t6))
    slt $t8, $t1, $t5 # // t8 = t1 < t5 
    slt $t9, $t4, $t1 # // t9 = t4 < t1
    and $t8, $t8, $t9 # // t8 = t4 < t1 < t5
    slt $t9, $t0, $t5 # // t9 = t0 < t5
    slt $s0, $t4, $t0 # // s0 = t4 < t0
    and $t9, $t9, $s0 # // t9 = t4 < t0 < t5
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5
    
    seq $t9, $t1, $t5 # // t9 = t1 == t5
    seq $s0, $t0, $t4 # // s0 = t0 == t4
    and $t9, $t9, $s0 # // t9 = t1 == t5 && t0 == t4
    or $t8, $t8, $t9 # // t8 = t4 < t1 < t5 || t4 < t0 < t5 || (t1 == t5 && t0 == t4)
    
    slt $t9, $t6, $t2 # // t9 = t6 < t2
    slt $s0, $t2, $t7 # // s0 = t2 < t7
    and $t9, $t9, $s0 # // t9 = t6 < t2 < t7
    slt $s0, $t6, $t3 # // s0 = t6 < t3
    slt $s1, $t3, $t7 # // s1 = t3 < t7
    and $s0, $s0,$s1 # // s0 = t6 < t3 < t7
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7
    
    seq $s0, $t3, $t7 # // s0 = t3 == t7
    seq $s1, $t2, $t6 # // s1 = t2 == t6
    and $s0, $s0, $s1 # // s0 = t3 == t7 && t2 == t6
    or $t9, $t9, $s0 # // t9 = t6 < t2 < t7 || t6 < t3 < t7 || (t3 == t7 && t2 == t6)
    
    and $s6, $t8, $t9 # // s6 = (t4 <= t1 <= t5 || t4 <= t0 <= t5) && (t6 <= t2 <= t7 || t6 <= t3 <= t7)
    
    # if (collide either way)
    or $t8, $s6, $s7
    beq $t8, 0, ELSE_rect_collide_1
    IF_rect_collide_1:
        # return 1
        li $t9, 1
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        jr $ra
        
        j ENDIF_rect_collide_1
    ELSE_rect_collide_1:
        # return 0
        li $t9, 0
        sw $t9, 0($sp)
        subi $sp, $sp, 4
        jr $ra
    ENDIF_rect_collide_1:

END_PROG: 
